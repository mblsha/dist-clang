// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Statistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Statistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Statistic_Histogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Statistic_Histogram_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Statistic_Metric_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stats_2eproto() {
  protobuf_AddDesc_stats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stats.proto");
  GOOGLE_CHECK(file != NULL);
  Statistic_descriptor_ = file->message_type(0);
  static const int Statistic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, values_),
  };
  Statistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Statistic_descriptor_,
      Statistic::default_instance_,
      Statistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Statistic));
  Statistic_Histogram_descriptor_ = Statistic_descriptor_->nested_type(0);
  static const int Statistic_Histogram_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic_Histogram, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic_Histogram, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic_Histogram, count_),
  };
  Statistic_Histogram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Statistic_Histogram_descriptor_,
      Statistic_Histogram::default_instance_,
      Statistic_Histogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic_Histogram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic_Histogram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Statistic_Histogram));
  Statistic_Metric_descriptor_ = Statistic_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Statistic_descriptor_, &Statistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Statistic_Histogram_descriptor_, &Statistic_Histogram::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stats_2eproto() {
  delete Statistic::default_instance_;
  delete Statistic_reflection_;
  delete Statistic_Histogram::default_instance_;
  delete Statistic_Histogram_reflection_;
}

void protobuf_AddDesc_stats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013stats.proto\022\020dist_clang.proto\"\315\001\n\tStat"
    "istic\022\020\n\010interval\030\001 \002(\004\0225\n\006values\030\002 \003(\0132"
    "%.dist_clang.proto.Statistic.Histogram\032]"
    "\n\tHistogram\0222\n\006metric\030\001 \002(\0162\".dist_clang"
    ".proto.Statistic.Metric\022\r\n\005value\030\002 \003(\004\022\r"
    "\n\005count\030\003 \003(\004\"\030\n\006Metric\022\016\n\nTASK_COUNT\020\001", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stats.proto", &protobuf_RegisterTypes);
  Statistic::default_instance_ = new Statistic();
  Statistic_Histogram::default_instance_ = new Statistic_Histogram();
  Statistic::default_instance_->InitAsDefaultInstance();
  Statistic_Histogram::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stats_2eproto {
  StaticDescriptorInitializer_stats_2eproto() {
    protobuf_AddDesc_stats_2eproto();
  }
} static_descriptor_initializer_stats_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Statistic_Metric_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statistic_Metric_descriptor_;
}
bool Statistic_Metric_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Statistic_Metric Statistic::TASK_COUNT;
const Statistic_Metric Statistic::Metric_MIN;
const Statistic_Metric Statistic::Metric_MAX;
const int Statistic::Metric_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Statistic_Histogram::kMetricFieldNumber;
const int Statistic_Histogram::kValueFieldNumber;
const int Statistic_Histogram::kCountFieldNumber;
#endif  // !_MSC_VER

Statistic_Histogram::Statistic_Histogram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Statistic_Histogram::InitAsDefaultInstance() {
}

Statistic_Histogram::Statistic_Histogram(const Statistic_Histogram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Statistic_Histogram::SharedCtor() {
  _cached_size_ = 0;
  metric_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Statistic_Histogram::~Statistic_Histogram() {
  SharedDtor();
}

void Statistic_Histogram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Statistic_Histogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistic_Histogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statistic_Histogram_descriptor_;
}

const Statistic_Histogram& Statistic_Histogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

Statistic_Histogram* Statistic_Histogram::default_instance_ = NULL;

Statistic_Histogram* Statistic_Histogram::New() const {
  return new Statistic_Histogram;
}

void Statistic_Histogram::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    metric_ = 1;
  }
  value_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Statistic_Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dist_clang.proto.Statistic.Metric metric = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dist_clang::proto::Statistic_Metric_IsValid(value)) {
            set_metric(static_cast< ::dist_clang::proto::Statistic_Metric >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // repeated uint64 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Statistic_Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dist_clang.proto.Statistic.Metric metric = 1;
  if (has_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->metric(), output);
  }

  // repeated uint64 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->value(i), output);
  }

  // repeated uint64 count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Statistic_Histogram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dist_clang.proto.Statistic.Metric metric = 1;
  if (has_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->metric(), target);
  }

  // repeated uint64 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->value(i), target);
  }

  // repeated uint64 count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Statistic_Histogram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dist_clang.proto.Statistic.Metric metric = 1;
    if (has_metric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->metric());
    }

  }
  // repeated uint64 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  // repeated uint64 count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic_Histogram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Statistic_Histogram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Statistic_Histogram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Statistic_Histogram::MergeFrom(const Statistic_Histogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metric()) {
      set_metric(from.metric());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Statistic_Histogram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic_Histogram::CopyFrom(const Statistic_Histogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic_Histogram::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Statistic_Histogram::Swap(Statistic_Histogram* other) {
  if (other != this) {
    std::swap(metric_, other->metric_);
    value_.Swap(&other->value_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Statistic_Histogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Statistic_Histogram_descriptor_;
  metadata.reflection = Statistic_Histogram_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Statistic::kIntervalFieldNumber;
const int Statistic::kValuesFieldNumber;
#endif  // !_MSC_VER

Statistic::Statistic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Statistic::InitAsDefaultInstance() {
}

Statistic::Statistic(const Statistic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Statistic::SharedCtor() {
  _cached_size_ = 0;
  interval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Statistic::~Statistic() {
  SharedDtor();
}

void Statistic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statistic_descriptor_;
}

const Statistic& Statistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stats_2eproto();
  return *default_instance_;
}

Statistic* Statistic::default_instance_ = NULL;

Statistic* Statistic::New() const {
  return new Statistic;
}

void Statistic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interval_ = GOOGLE_ULONGLONG(0);
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .dist_clang.proto.Statistic.Histogram values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 interval = 1;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->interval(), output);
  }

  // repeated .dist_clang.proto.Statistic.Histogram values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Statistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 interval = 1;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->interval(), target);
  }

  // repeated .dist_clang.proto.Statistic.Histogram values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Statistic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 interval = 1;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interval());
    }

  }
  // repeated .dist_clang.proto.Statistic.Histogram values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Statistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Statistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Statistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void Statistic::Swap(Statistic* other) {
  if (other != this) {
    std::swap(interval_, other->interval_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Statistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Statistic_descriptor_;
  metadata.reflection = Statistic_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

// @@protoc_insertion_point(global_scope)
