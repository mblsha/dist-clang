// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Universal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Universal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Compiler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Compiler_reflection_ = NULL;
const ::google::protobuf::Descriptor* Flags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Flags_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalExecute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalExecute_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteExecute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteExecute_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_remote_2eproto() {
  protobuf_AddDesc_remote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remote.proto");
  GOOGLE_CHECK(file != NULL);
  Universal_descriptor_ = file->message_type(0);
  static const int Universal_offsets_[1] = {
  };
  Universal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Universal_descriptor_,
      Universal::default_instance_,
      Universal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Universal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Universal, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Universal, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Universal));
  Test_descriptor_ = file->message_type(1);
  static const int Test_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, field1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, field2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, field3_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  Error_descriptor_ = file->message_type(2);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, description_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_Code_descriptor_ = Error_descriptor_->enum_type(0);
  Compiler_descriptor_ = file->message_type(3);
  static const int Compiler_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compiler, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compiler, version_),
  };
  Compiler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Compiler_descriptor_,
      Compiler::default_instance_,
      Compiler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compiler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compiler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Compiler));
  Flags_descriptor_ = file->message_type(4);
  static const int Flags_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, compiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, other_),
  };
  Flags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Flags_descriptor_,
      Flags::default_instance_,
      Flags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Flags));
  LocalExecute_descriptor_ = file->message_type(5);
  static const int LocalExecute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecute, current_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecute, cc_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecute, pp_flags_),
  };
  LocalExecute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalExecute_descriptor_,
      LocalExecute::default_instance_,
      LocalExecute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalExecute));
  RemoteExecute_descriptor_ = file->message_type(6);
  static const int RemoteExecute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecute, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecute, cc_flags_),
  };
  RemoteExecute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteExecute_descriptor_,
      RemoteExecute::default_instance_,
      RemoteExecute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteExecute));
  RemoteResult_descriptor_ = file->message_type(7);
  static const int RemoteResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResult, obj_),
  };
  RemoteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteResult_descriptor_,
      RemoteResult::default_instance_,
      RemoteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Universal_descriptor_, &Universal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Compiler_descriptor_, &Compiler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Flags_descriptor_, &Flags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalExecute_descriptor_, &LocalExecute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteExecute_descriptor_, &RemoteExecute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteResult_descriptor_, &RemoteResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remote_2eproto() {
  delete Universal::default_instance_;
  delete Universal_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Compiler::default_instance_;
  delete Compiler_reflection_;
  delete Flags::default_instance_;
  delete Flags_reflection_;
  delete LocalExecute::default_instance_;
  delete LocalExecute_reflection_;
  delete RemoteExecute::default_instance_;
  delete RemoteExecute_reflection_;
  delete RemoteResult::default_instance_;
  delete RemoteResult_reflection_;
}

void protobuf_AddDesc_remote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014remote.proto\022\020dist_clang.proto\"\022\n\tUniv"
    "ersal*\005\010\001\020\311\001\"y\n\004Test\022\016\n\006field1\030\001 \002(\t\022\016\n\006"
    "field2\030\002 \001(\t\022\016\n\006field3\030\003 \003(\t2A\n\004test\022\033.d"
    "ist_clang.proto.Universal\030\001 \001(\0132\026.dist_c"
    "lang.proto.Test\"\363\001\n\005Error\022.\n\004code\030\001 \002(\0162"
    "\034.dist_clang.proto.Error.Code:\002OK\022\023\n\013des"
    "cription\030\002 \001(\t\"`\n\004Code\022\006\n\002OK\020\000\022\020\n\014INCONS"
    "EQUENT\020\001\022\013\n\007NETWORK\020\002\022\017\n\013BAD_MESSAGE\020\003\022\021"
    "\n\rEMPTY_MESSAGE\020\004\022\r\n\tEXECUTION\020\0052C\n\005erro"
    "r\022\033.dist_clang.proto.Universal\030\002 \001(\0132\027.d"
    "ist_clang.proto.Error\")\n\010Compiler\022\014\n\004pat"
    "h\030\001 \002(\t\022\017\n\007version\030\002 \001(\t\"c\n\005Flags\022,\n\010com"
    "piler\030\001 \002(\0132\032.dist_clang.proto.Compiler\022"
    "\016\n\006output\030\002 \001(\t\022\r\n\005input\030\003 \001(\t\022\r\n\005other\030"
    "\004 \003(\t\"\305\001\n\014LocalExecute\022\023\n\013current_dir\030\001 "
    "\002(\t\022)\n\010cc_flags\030\002 \002(\0132\027.dist_clang.proto"
    ".Flags\022)\n\010pp_flags\030\003 \001(\0132\027.dist_clang.pr"
    "oto.Flags2J\n\005local\022\033.dist_clang.proto.Un"
    "iversal\030\003 \001(\0132\036.dist_clang.proto.LocalEx"
    "ecute\"\226\001\n\rRemoteExecute\022\014\n\004code\030\001 \002(\t\022)\n"
    "\010cc_flags\030\002 \002(\0132\027.dist_clang.proto.Flags"
    "2L\n\006remote\022\033.dist_clang.proto.Universal\030"
    "\004 \001(\0132\037.dist_clang.proto.RemoteExecute\"h"
    "\n\014RemoteResult\022\013\n\003obj\030\001 \002(\t2K\n\006result\022\033."
    "dist_clang.proto.Universal\030\005 \001(\0132\036.dist_"
    "clang.proto.RemoteResult", 1024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remote.proto", &protobuf_RegisterTypes);
  Universal::default_instance_ = new Universal();
  Test::default_instance_ = new Test();
  Error::default_instance_ = new Error();
  Compiler::default_instance_ = new Compiler();
  Flags::default_instance_ = new Flags();
  LocalExecute::default_instance_ = new LocalExecute();
  RemoteExecute::default_instance_ = new RemoteExecute();
  RemoteResult::default_instance_ = new RemoteResult();
  Universal::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::dist_clang::proto::Universal::default_instance(),
    1, 11, false, false,
    &::dist_clang::proto::Test::default_instance());
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::dist_clang::proto::Universal::default_instance(),
    2, 11, false, false,
    &::dist_clang::proto::Error::default_instance());
  Compiler::default_instance_->InitAsDefaultInstance();
  Flags::default_instance_->InitAsDefaultInstance();
  LocalExecute::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::dist_clang::proto::Universal::default_instance(),
    3, 11, false, false,
    &::dist_clang::proto::LocalExecute::default_instance());
  RemoteExecute::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::dist_clang::proto::Universal::default_instance(),
    4, 11, false, false,
    &::dist_clang::proto::RemoteExecute::default_instance());
  RemoteResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::dist_clang::proto::Universal::default_instance(),
    5, 11, false, false,
    &::dist_clang::proto::RemoteResult::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_2eproto {
  StaticDescriptorInitializer_remote_2eproto() {
    protobuf_AddDesc_remote_2eproto();
  }
} static_descriptor_initializer_remote_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Universal::Universal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Universal::InitAsDefaultInstance() {
}

Universal::Universal(const Universal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Universal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Universal::~Universal() {
  SharedDtor();
}

void Universal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Universal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Universal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Universal_descriptor_;
}

const Universal& Universal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

Universal* Universal::default_instance_ = NULL;

Universal* Universal::New() const {
  return new Universal;
}

void Universal::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Universal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8u <= tag && tag < 1608u)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Universal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 201)
  _extensions_.SerializeWithCachedSizes(
      1, 201, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Universal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 201)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 201, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Universal::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Universal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Universal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Universal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Universal::MergeFrom(const Universal& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Universal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Universal::CopyFrom(const Universal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Universal::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Universal::Swap(Universal* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Universal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Universal_descriptor_;
  metadata.reflection = Universal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Test::kField1FieldNumber;
const int Test::kField2FieldNumber;
const int Test::kField3FieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Test::kTestFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
    ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Test >, 11, false >
  Test::test(kTestFieldNumber, ::dist_clang::proto::Test::default_instance());
Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Test::InitAsDefaultInstance() {
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Test::SharedCtor() {
  _cached_size_ = 0;
  field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  SharedDtor();
}

void Test::SharedDtor() {
  if (field1_ != &::google::protobuf::internal::kEmptyString) {
    delete field1_;
  }
  if (field2_ != &::google::protobuf::internal::kEmptyString) {
    delete field2_;
  }
  if (this != default_instance_) {
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field1()) {
      if (field1_ != &::google::protobuf::internal::kEmptyString) {
        field1_->clear();
      }
    }
    if (has_field2()) {
      if (field2_ != &::google::protobuf::internal::kEmptyString) {
        field2_->clear();
      }
    }
  }
  field3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field1().data(), this->field1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field2;
        break;
      }

      // optional string field2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field2().data(), this->field2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field3;
        break;
      }

      // repeated string field3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field3(this->field3_size() - 1).data(),
            this->field3(this->field3_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string field1 = 1;
  if (has_field1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field1().data(), this->field1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field1(), output);
  }

  // optional string field2 = 2;
  if (has_field2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field2().data(), this->field2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field2(), output);
  }

  // repeated string field3 = 3;
  for (int i = 0; i < this->field3_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field3(i).data(), this->field3(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->field3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string field1 = 1;
  if (has_field1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field1().data(), this->field1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field1(), target);
  }

  // optional string field2 = 2;
  if (has_field2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field2().data(), this->field2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field2(), target);
  }

  // repeated string field3 = 3;
  for (int i = 0; i < this->field3_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field3(i).data(), this->field3(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->field3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string field1 = 1;
    if (has_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field1());
    }

    // optional string field2 = 2;
    if (has_field2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field2());
    }

  }
  // repeated string field3 = 3;
  total_size += 1 * this->field3_size();
  for (int i = 0; i < this->field3_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  field3_.MergeFrom(from.field3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1()) {
      set_field1(from.field1());
    }
    if (from.has_field2()) {
      set_field2(from.field2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(field1_, other->field1_);
    std::swap(field2_, other->field2_);
    field3_.Swap(&other->field3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_Code Error::OK;
const Error_Code Error::INCONSEQUENT;
const Error_Code Error::NETWORK;
const Error_Code Error::BAD_MESSAGE;
const Error_Code Error::EMPTY_MESSAGE;
const Error_Code Error::EXECUTION;
const Error_Code Error::Code_MIN;
const Error_Code Error::Code_MAX;
const int Error::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Error::kCodeFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Error::kErrorFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
    ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Error >, 11, false >
  Error::error(kErrorFieldNumber, ::dist_clang::proto::Error::default_instance());
Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dist_clang.proto.Error.Code code = 1 [default = OK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dist_clang::proto::Error_Code_IsValid(value)) {
            set_code(static_cast< ::dist_clang::proto::Error_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dist_clang.proto.Error.Code code = 1 [default = OK];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dist_clang.proto.Error.Code code = 1 [default = OK];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dist_clang.proto.Error.Code code = 1 [default = OK];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Compiler::kPathFieldNumber;
const int Compiler::kVersionFieldNumber;
#endif  // !_MSC_VER

Compiler::Compiler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Compiler::InitAsDefaultInstance() {
}

Compiler::Compiler(const Compiler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Compiler::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Compiler::~Compiler() {
  SharedDtor();
}

void Compiler::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void Compiler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Compiler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compiler_descriptor_;
}

const Compiler& Compiler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

Compiler* Compiler::default_instance_ = NULL;

Compiler* Compiler::New() const {
  return new Compiler;
}

void Compiler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Compiler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Compiler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Compiler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Compiler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Compiler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Compiler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Compiler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Compiler::MergeFrom(const Compiler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Compiler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compiler::CopyFrom(const Compiler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compiler::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Compiler::Swap(Compiler* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Compiler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Compiler_descriptor_;
  metadata.reflection = Compiler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Flags::kCompilerFieldNumber;
const int Flags::kOutputFieldNumber;
const int Flags::kInputFieldNumber;
const int Flags::kOtherFieldNumber;
#endif  // !_MSC_VER

Flags::Flags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Flags::InitAsDefaultInstance() {
  compiler_ = const_cast< ::dist_clang::proto::Compiler*>(&::dist_clang::proto::Compiler::default_instance());
}

Flags::Flags(const Flags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Flags::SharedCtor() {
  _cached_size_ = 0;
  compiler_ = NULL;
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Flags::~Flags() {
  SharedDtor();
}

void Flags::SharedDtor() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (this != default_instance_) {
    delete compiler_;
  }
}

void Flags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Flags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Flags_descriptor_;
}

const Flags& Flags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

Flags* Flags::default_instance_ = NULL;

Flags* Flags::New() const {
  return new Flags;
}

void Flags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_compiler()) {
      if (compiler_ != NULL) compiler_->::dist_clang::proto::Compiler::Clear();
    }
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::kEmptyString) {
        output_->clear();
      }
    }
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
  }
  other_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Flags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dist_clang.proto.Compiler compiler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compiler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // optional string output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // optional string input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input().data(), this->input().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other;
        break;
      }

      // repeated string other = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other(this->other_size() - 1).data(),
            this->other(this->other_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Flags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dist_clang.proto.Compiler compiler = 1;
  if (has_compiler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compiler(), output);
  }

  // optional string output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(), output);
  }

  // optional string input = 3;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(), output);
  }

  // repeated string other = 4;
  for (int i = 0; i < this->other_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->other(i).data(), this->other(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->other(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Flags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dist_clang.proto.Compiler compiler = 1;
  if (has_compiler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->compiler(), target);
  }

  // optional string output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  // optional string input = 3;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input(), target);
  }

  // repeated string other = 4;
  for (int i = 0; i < this->other_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other(i).data(), this->other(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->other(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Flags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dist_clang.proto.Compiler compiler = 1;
    if (has_compiler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compiler());
    }

    // optional string output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output());
    }

    // optional string input = 3;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

  }
  // repeated string other = 4;
  total_size += 1 * this->other_size();
  for (int i = 0; i < this->other_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->other(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Flags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Flags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Flags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Flags::MergeFrom(const Flags& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_.MergeFrom(from.other_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compiler()) {
      mutable_compiler()->::dist_clang::proto::Compiler::MergeFrom(from.compiler());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Flags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flags::CopyFrom(const Flags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flags::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_compiler()) {
    if (!this->compiler().IsInitialized()) return false;
  }
  return true;
}

void Flags::Swap(Flags* other) {
  if (other != this) {
    std::swap(compiler_, other->compiler_);
    std::swap(output_, other->output_);
    std::swap(input_, other->input_);
    other_.Swap(&other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Flags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Flags_descriptor_;
  metadata.reflection = Flags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalExecute::kCurrentDirFieldNumber;
const int LocalExecute::kCcFlagsFieldNumber;
const int LocalExecute::kPpFlagsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int LocalExecute::kLocalFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
    ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::LocalExecute >, 11, false >
  LocalExecute::local(kLocalFieldNumber, ::dist_clang::proto::LocalExecute::default_instance());
LocalExecute::LocalExecute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalExecute::InitAsDefaultInstance() {
  cc_flags_ = const_cast< ::dist_clang::proto::Flags*>(&::dist_clang::proto::Flags::default_instance());
  pp_flags_ = const_cast< ::dist_clang::proto::Flags*>(&::dist_clang::proto::Flags::default_instance());
}

LocalExecute::LocalExecute(const LocalExecute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalExecute::SharedCtor() {
  _cached_size_ = 0;
  current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cc_flags_ = NULL;
  pp_flags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalExecute::~LocalExecute() {
  SharedDtor();
}

void LocalExecute::SharedDtor() {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete current_dir_;
  }
  if (this != default_instance_) {
    delete cc_flags_;
    delete pp_flags_;
  }
}

void LocalExecute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalExecute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalExecute_descriptor_;
}

const LocalExecute& LocalExecute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

LocalExecute* LocalExecute::default_instance_ = NULL;

LocalExecute* LocalExecute::New() const {
  return new LocalExecute;
}

void LocalExecute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_current_dir()) {
      if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
        current_dir_->clear();
      }
    }
    if (has_cc_flags()) {
      if (cc_flags_ != NULL) cc_flags_->::dist_clang::proto::Flags::Clear();
    }
    if (has_pp_flags()) {
      if (pp_flags_ != NULL) pp_flags_->::dist_clang::proto::Flags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string current_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_dir().data(), this->current_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cc_flags;
        break;
      }

      // required .dist_clang.proto.Flags cc_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cc_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pp_flags;
        break;
      }

      // optional .dist_clang.proto.Flags pp_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pp_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pp_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string current_dir = 1;
  if (has_current_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_dir().data(), this->current_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->current_dir(), output);
  }

  // required .dist_clang.proto.Flags cc_flags = 2;
  if (has_cc_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cc_flags(), output);
  }

  // optional .dist_clang.proto.Flags pp_flags = 3;
  if (has_pp_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pp_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalExecute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string current_dir = 1;
  if (has_current_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_dir().data(), this->current_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->current_dir(), target);
  }

  // required .dist_clang.proto.Flags cc_flags = 2;
  if (has_cc_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cc_flags(), target);
  }

  // optional .dist_clang.proto.Flags pp_flags = 3;
  if (has_pp_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pp_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalExecute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string current_dir = 1;
    if (has_current_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_dir());
    }

    // required .dist_clang.proto.Flags cc_flags = 2;
    if (has_cc_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cc_flags());
    }

    // optional .dist_clang.proto.Flags pp_flags = 3;
    if (has_pp_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pp_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalExecute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalExecute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalExecute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalExecute::MergeFrom(const LocalExecute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_dir()) {
      set_current_dir(from.current_dir());
    }
    if (from.has_cc_flags()) {
      mutable_cc_flags()->::dist_clang::proto::Flags::MergeFrom(from.cc_flags());
    }
    if (from.has_pp_flags()) {
      mutable_pp_flags()->::dist_clang::proto::Flags::MergeFrom(from.pp_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalExecute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalExecute::CopyFrom(const LocalExecute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalExecute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cc_flags()) {
    if (!this->cc_flags().IsInitialized()) return false;
  }
  if (has_pp_flags()) {
    if (!this->pp_flags().IsInitialized()) return false;
  }
  return true;
}

void LocalExecute::Swap(LocalExecute* other) {
  if (other != this) {
    std::swap(current_dir_, other->current_dir_);
    std::swap(cc_flags_, other->cc_flags_);
    std::swap(pp_flags_, other->pp_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalExecute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalExecute_descriptor_;
  metadata.reflection = LocalExecute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteExecute::kCodeFieldNumber;
const int RemoteExecute::kCcFlagsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RemoteExecute::kRemoteFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
    ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::RemoteExecute >, 11, false >
  RemoteExecute::remote(kRemoteFieldNumber, ::dist_clang::proto::RemoteExecute::default_instance());
RemoteExecute::RemoteExecute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteExecute::InitAsDefaultInstance() {
  cc_flags_ = const_cast< ::dist_clang::proto::Flags*>(&::dist_clang::proto::Flags::default_instance());
}

RemoteExecute::RemoteExecute(const RemoteExecute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteExecute::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cc_flags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteExecute::~RemoteExecute() {
  SharedDtor();
}

void RemoteExecute::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
    delete cc_flags_;
  }
}

void RemoteExecute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteExecute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteExecute_descriptor_;
}

const RemoteExecute& RemoteExecute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

RemoteExecute* RemoteExecute::default_instance_ = NULL;

RemoteExecute* RemoteExecute::New() const {
  return new RemoteExecute;
}

void RemoteExecute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_cc_flags()) {
      if (cc_flags_ != NULL) cc_flags_->::dist_clang::proto::Flags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cc_flags;
        break;
      }

      // required .dist_clang.proto.Flags cc_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cc_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // required .dist_clang.proto.Flags cc_flags = 2;
  if (has_cc_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cc_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteExecute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required .dist_clang.proto.Flags cc_flags = 2;
  if (has_cc_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cc_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteExecute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required .dist_clang.proto.Flags cc_flags = 2;
    if (has_cc_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cc_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteExecute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteExecute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteExecute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteExecute::MergeFrom(const RemoteExecute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_cc_flags()) {
      mutable_cc_flags()->::dist_clang::proto::Flags::MergeFrom(from.cc_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteExecute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteExecute::CopyFrom(const RemoteExecute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteExecute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cc_flags()) {
    if (!this->cc_flags().IsInitialized()) return false;
  }
  return true;
}

void RemoteExecute::Swap(RemoteExecute* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(cc_flags_, other->cc_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteExecute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteExecute_descriptor_;
  metadata.reflection = RemoteExecute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteResult::kObjFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RemoteResult::kResultFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
    ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::RemoteResult >, 11, false >
  RemoteResult::result(kResultFieldNumber, ::dist_clang::proto::RemoteResult::default_instance());
RemoteResult::RemoteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteResult::InitAsDefaultInstance() {
}

RemoteResult::RemoteResult(const RemoteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteResult::SharedCtor() {
  _cached_size_ = 0;
  obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteResult::~RemoteResult() {
  SharedDtor();
}

void RemoteResult::SharedDtor() {
  if (obj_ != &::google::protobuf::internal::kEmptyString) {
    delete obj_;
  }
  if (this != default_instance_) {
  }
}

void RemoteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteResult_descriptor_;
}

const RemoteResult& RemoteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
  return *default_instance_;
}

RemoteResult* RemoteResult::default_instance_ = NULL;

RemoteResult* RemoteResult::New() const {
  return new RemoteResult;
}

void RemoteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_obj()) {
      if (obj_ != &::google::protobuf::internal::kEmptyString) {
        obj_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string obj = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->obj().data(), this->obj().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->obj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string obj = 1;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->obj().data(), this->obj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string obj = 1;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obj());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteResult::MergeFrom(const RemoteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj()) {
      set_obj(from.obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteResult::CopyFrom(const RemoteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoteResult::Swap(RemoteResult* other) {
  if (other != this) {
    std::swap(obj_, other->obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteResult_descriptor_;
  metadata.reflection = RemoteResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

// @@protoc_insertion_point(global_scope)
