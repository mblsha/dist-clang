// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Configuration;

// ===================================================================

class Configuration : public ::google::protobuf::Message {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  void Swap(Configuration* other);

  // implements Message ----------------------------------------------

  Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string socket_path = 1;
  inline bool has_socket_path() const;
  inline void clear_socket_path();
  static const int kSocketPathFieldNumber = 1;
  inline const ::std::string& socket_path() const;
  inline void set_socket_path(const ::std::string& value);
  inline void set_socket_path(const char* value);
  inline void set_socket_path(const char* value, size_t size);
  inline ::std::string* mutable_socket_path();
  inline ::std::string* release_socket_path();
  inline void set_allocated_socket_path(::std::string* socket_path);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration)
 private:
  inline void set_has_socket_path();
  inline void clear_has_socket_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* socket_path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Configuration* default_instance_;
};
// ===================================================================


// ===================================================================

// Configuration

// required string socket_path = 1;
inline bool Configuration::has_socket_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration::set_has_socket_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration::clear_has_socket_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration::clear_socket_path() {
  if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
    socket_path_->clear();
  }
  clear_has_socket_path();
}
inline const ::std::string& Configuration::socket_path() const {
  return *socket_path_;
}
inline void Configuration::set_socket_path(const ::std::string& value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
}
inline void Configuration::set_socket_path(const char* value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
}
inline void Configuration::set_socket_path(const char* value, size_t size) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Configuration::mutable_socket_path() {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  return socket_path_;
}
inline ::std::string* Configuration::release_socket_path() {
  clear_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = socket_path_;
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Configuration::set_allocated_socket_path(::std::string* socket_path) {
  if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_path_;
  }
  if (socket_path) {
    set_has_socket_path();
    socket_path_ = socket_path;
  } else {
    clear_has_socket_path();
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
