// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Host;
class Configuration;

// ===================================================================

class Host : public ::google::protobuf::Message {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  Host* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 port = 2 [default = 6000];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 threads = 3 [default = 2];
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 3;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Host)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_threads();
  inline void clear_has_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 threads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Host* default_instance_;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  void Swap(Configuration* other);

  // implements Message ----------------------------------------------

  Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string socket_path = 1;
  inline bool has_socket_path() const;
  inline void clear_socket_path();
  static const int kSocketPathFieldNumber = 1;
  inline const ::std::string& socket_path() const;
  inline void set_socket_path(const ::std::string& value);
  inline void set_socket_path(const char* value);
  inline void set_socket_path(const char* value, size_t size);
  inline ::std::string* mutable_socket_path();
  inline ::std::string* release_socket_path();
  inline void set_allocated_socket_path(::std::string* socket_path);

  // optional uint32 pool_capacity = 2 [default = 16];
  inline bool has_pool_capacity() const;
  inline void clear_pool_capacity();
  static const int kPoolCapacityFieldNumber = 2;
  inline ::google::protobuf::uint32 pool_capacity() const;
  inline void set_pool_capacity(::google::protobuf::uint32 value);

  // optional string cache_path = 3;
  inline bool has_cache_path() const;
  inline void clear_cache_path();
  static const int kCachePathFieldNumber = 3;
  inline const ::std::string& cache_path() const;
  inline void set_cache_path(const ::std::string& value);
  inline void set_cache_path(const char* value);
  inline void set_cache_path(const char* value, size_t size);
  inline ::std::string* mutable_cache_path();
  inline ::std::string* release_cache_path();
  inline void set_allocated_cache_path(::std::string* cache_path);

  // repeated .dist_clang.proto.Host remotes = 4;
  inline int remotes_size() const;
  inline void clear_remotes();
  static const int kRemotesFieldNumber = 4;
  inline const ::dist_clang::proto::Host& remotes(int index) const;
  inline ::dist_clang::proto::Host* mutable_remotes(int index);
  inline ::dist_clang::proto::Host* add_remotes();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >&
      remotes() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >*
      mutable_remotes();

  // optional .dist_clang.proto.Host local = 5;
  inline bool has_local() const;
  inline void clear_local();
  static const int kLocalFieldNumber = 5;
  inline const ::dist_clang::proto::Host& local() const;
  inline ::dist_clang::proto::Host* mutable_local();
  inline ::dist_clang::proto::Host* release_local();
  inline void set_allocated_local(::dist_clang::proto::Host* local);

  // repeated .dist_clang.proto.Compiler versions = 6;
  inline int versions_size() const;
  inline void clear_versions();
  static const int kVersionsFieldNumber = 6;
  inline const ::dist_clang::proto::Compiler& versions(int index) const;
  inline ::dist_clang::proto::Compiler* mutable_versions(int index);
  inline ::dist_clang::proto::Compiler* add_versions();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >&
      versions() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration)
 private:
  inline void set_has_socket_path();
  inline void clear_has_socket_path();
  inline void set_has_pool_capacity();
  inline void clear_has_pool_capacity();
  inline void set_has_cache_path();
  inline void clear_has_cache_path();
  inline void set_has_local();
  inline void clear_has_local();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* socket_path_;
  ::std::string* cache_path_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host > remotes_;
  ::dist_clang::proto::Host* local_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler > versions_;
  ::google::protobuf::uint32 pool_capacity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Configuration* default_instance_;
};
// ===================================================================


// ===================================================================

// Host

// required string host = 1;
inline bool Host::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Host::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Host::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Host::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Host::host() const {
  return *host_;
}
inline void Host::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Host::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Host::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Host::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* Host::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Host::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2 [default = 6000];
inline bool Host::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Host::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Host::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Host::clear_port() {
  port_ = 6000u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Host::port() const {
  return port_;
}
inline void Host::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 threads = 3 [default = 2];
inline bool Host::has_threads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Host::set_has_threads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Host::clear_has_threads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Host::clear_threads() {
  threads_ = 2u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 Host::threads() const {
  return threads_;
}
inline void Host::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
}

// -------------------------------------------------------------------

// Configuration

// optional string socket_path = 1;
inline bool Configuration::has_socket_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration::set_has_socket_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration::clear_has_socket_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration::clear_socket_path() {
  if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
    socket_path_->clear();
  }
  clear_has_socket_path();
}
inline const ::std::string& Configuration::socket_path() const {
  return *socket_path_;
}
inline void Configuration::set_socket_path(const ::std::string& value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
}
inline void Configuration::set_socket_path(const char* value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
}
inline void Configuration::set_socket_path(const char* value, size_t size) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Configuration::mutable_socket_path() {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    socket_path_ = new ::std::string;
  }
  return socket_path_;
}
inline ::std::string* Configuration::release_socket_path() {
  clear_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = socket_path_;
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Configuration::set_allocated_socket_path(::std::string* socket_path) {
  if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_path_;
  }
  if (socket_path) {
    set_has_socket_path();
    socket_path_ = socket_path;
  } else {
    clear_has_socket_path();
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pool_capacity = 2 [default = 16];
inline bool Configuration::has_pool_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration::set_has_pool_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration::clear_has_pool_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration::clear_pool_capacity() {
  pool_capacity_ = 16u;
  clear_has_pool_capacity();
}
inline ::google::protobuf::uint32 Configuration::pool_capacity() const {
  return pool_capacity_;
}
inline void Configuration::set_pool_capacity(::google::protobuf::uint32 value) {
  set_has_pool_capacity();
  pool_capacity_ = value;
}

// optional string cache_path = 3;
inline bool Configuration::has_cache_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Configuration::set_has_cache_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Configuration::clear_has_cache_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Configuration::clear_cache_path() {
  if (cache_path_ != &::google::protobuf::internal::kEmptyString) {
    cache_path_->clear();
  }
  clear_has_cache_path();
}
inline const ::std::string& Configuration::cache_path() const {
  return *cache_path_;
}
inline void Configuration::set_cache_path(const ::std::string& value) {
  set_has_cache_path();
  if (cache_path_ == &::google::protobuf::internal::kEmptyString) {
    cache_path_ = new ::std::string;
  }
  cache_path_->assign(value);
}
inline void Configuration::set_cache_path(const char* value) {
  set_has_cache_path();
  if (cache_path_ == &::google::protobuf::internal::kEmptyString) {
    cache_path_ = new ::std::string;
  }
  cache_path_->assign(value);
}
inline void Configuration::set_cache_path(const char* value, size_t size) {
  set_has_cache_path();
  if (cache_path_ == &::google::protobuf::internal::kEmptyString) {
    cache_path_ = new ::std::string;
  }
  cache_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Configuration::mutable_cache_path() {
  set_has_cache_path();
  if (cache_path_ == &::google::protobuf::internal::kEmptyString) {
    cache_path_ = new ::std::string;
  }
  return cache_path_;
}
inline ::std::string* Configuration::release_cache_path() {
  clear_has_cache_path();
  if (cache_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cache_path_;
    cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Configuration::set_allocated_cache_path(::std::string* cache_path) {
  if (cache_path_ != &::google::protobuf::internal::kEmptyString) {
    delete cache_path_;
  }
  if (cache_path) {
    set_has_cache_path();
    cache_path_ = cache_path;
  } else {
    clear_has_cache_path();
    cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dist_clang.proto.Host remotes = 4;
inline int Configuration::remotes_size() const {
  return remotes_.size();
}
inline void Configuration::clear_remotes() {
  remotes_.Clear();
}
inline const ::dist_clang::proto::Host& Configuration::remotes(int index) const {
  return remotes_.Get(index);
}
inline ::dist_clang::proto::Host* Configuration::mutable_remotes(int index) {
  return remotes_.Mutable(index);
}
inline ::dist_clang::proto::Host* Configuration::add_remotes() {
  return remotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >&
Configuration::remotes() const {
  return remotes_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >*
Configuration::mutable_remotes() {
  return &remotes_;
}

// optional .dist_clang.proto.Host local = 5;
inline bool Configuration::has_local() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Configuration::set_has_local() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Configuration::clear_has_local() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Configuration::clear_local() {
  if (local_ != NULL) local_->::dist_clang::proto::Host::Clear();
  clear_has_local();
}
inline const ::dist_clang::proto::Host& Configuration::local() const {
  return local_ != NULL ? *local_ : *default_instance_->local_;
}
inline ::dist_clang::proto::Host* Configuration::mutable_local() {
  set_has_local();
  if (local_ == NULL) local_ = new ::dist_clang::proto::Host;
  return local_;
}
inline ::dist_clang::proto::Host* Configuration::release_local() {
  clear_has_local();
  ::dist_clang::proto::Host* temp = local_;
  local_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_local(::dist_clang::proto::Host* local) {
  delete local_;
  local_ = local;
  if (local) {
    set_has_local();
  } else {
    clear_has_local();
  }
}

// repeated .dist_clang.proto.Compiler versions = 6;
inline int Configuration::versions_size() const {
  return versions_.size();
}
inline void Configuration::clear_versions() {
  versions_.Clear();
}
inline const ::dist_clang::proto::Compiler& Configuration::versions(int index) const {
  return versions_.Get(index);
}
inline ::dist_clang::proto::Compiler* Configuration::mutable_versions(int index) {
  return versions_.Mutable(index);
}
inline ::dist_clang::proto::Compiler* Configuration::add_versions() {
  return versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >&
Configuration::versions() const {
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >*
Configuration::mutable_versions() {
  return &versions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
