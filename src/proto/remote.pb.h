// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_remote_2eproto__INCLUDED
#define PROTOBUF_remote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_remote_2eproto();
void protobuf_AssignDesc_remote_2eproto();
void protobuf_ShutdownFile_remote_2eproto();

class Universal;
class Test;
class Status;
class Flags;
class Execute;
class RemoteResult;

enum Status_Code {
  Status_Code_OK = 0,
  Status_Code_INCONSEQUENT = 1,
  Status_Code_NETWORK = 2,
  Status_Code_BAD_MESSAGE = 3,
  Status_Code_EMPTY_MESSAGE = 4,
  Status_Code_EXECUTION = 5,
  Status_Code_OVERLOAD = 6,
  Status_Code_NO_VERSION = 7
};
bool Status_Code_IsValid(int value);
const Status_Code Status_Code_Code_MIN = Status_Code_OK;
const Status_Code Status_Code_Code_MAX = Status_Code_NO_VERSION;
const int Status_Code_Code_ARRAYSIZE = Status_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_Code_descriptor();
inline const ::std::string& Status_Code_Name(Status_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_Code_descriptor(), value);
}
inline bool Status_Code_Parse(
    const ::std::string& name, Status_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_Code>(
    Status_Code_descriptor(), name, value);
}
// ===================================================================

class Universal : public ::google::protobuf::Message {
 public:
  Universal();
  virtual ~Universal();

  Universal(const Universal& from);

  inline Universal& operator=(const Universal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Universal& default_instance();

  void Swap(Universal* other);

  // implements Message ----------------------------------------------

  Universal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Universal& from);
  void MergeFrom(const Universal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Universal)
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Universal)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Universal* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // repeated string field3 = 3;
  inline int field3_size() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline const ::std::string& field3(int index) const;
  inline ::std::string* mutable_field3(int index);
  inline void set_field3(int index, const ::std::string& value);
  inline void set_field3(int index, const char* value);
  inline void set_field3(int index, const char* value, size_t size);
  inline ::std::string* add_field3();
  inline void add_field3(const ::std::string& value);
  inline void add_field3(const char* value);
  inline void add_field3(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& field3() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field3();

  static const int kExtensionFieldNumber = 1;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Test >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Test)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* field1_;
  ::std::string* field2_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Status_Code Code;
  static const Code OK = Status_Code_OK;
  static const Code INCONSEQUENT = Status_Code_INCONSEQUENT;
  static const Code NETWORK = Status_Code_NETWORK;
  static const Code BAD_MESSAGE = Status_Code_BAD_MESSAGE;
  static const Code EMPTY_MESSAGE = Status_Code_EMPTY_MESSAGE;
  static const Code EXECUTION = Status_Code_EXECUTION;
  static const Code OVERLOAD = Status_Code_OVERLOAD;
  static const Code NO_VERSION = Status_Code_NO_VERSION;
  static inline bool Code_IsValid(int value) {
    return Status_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Status_Code_Code_MIN;
  static const Code Code_MAX =
    Status_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Status_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Status_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Status_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Status_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Status.Code code = 1 [default = OK];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::dist_clang::proto::Status_Code code() const;
  inline void set_code(::dist_clang::proto::Status_Code value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  static const int kExtensionFieldNumber = 2;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Status >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Status)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Flags : public ::google::protobuf::Message {
 public:
  Flags();
  virtual ~Flags();

  Flags(const Flags& from);

  inline Flags& operator=(const Flags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Flags& default_instance();

  void Swap(Flags* other);

  // implements Message ----------------------------------------------

  Flags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Flags& from);
  void MergeFrom(const Flags& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Compiler compiler = 1;
  inline bool has_compiler() const;
  inline void clear_compiler();
  static const int kCompilerFieldNumber = 1;
  inline const ::dist_clang::proto::Compiler& compiler() const;
  inline ::dist_clang::proto::Compiler* mutable_compiler();
  inline ::dist_clang::proto::Compiler* release_compiler();
  inline void set_allocated_compiler(::dist_clang::proto::Compiler* compiler);

  // optional string output = 2;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 2;
  inline const ::std::string& output() const;
  inline void set_output(const ::std::string& value);
  inline void set_output(const char* value);
  inline void set_output(const char* value, size_t size);
  inline ::std::string* mutable_output();
  inline ::std::string* release_output();
  inline void set_allocated_output(::std::string* output);

  // optional string input = 3;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const char* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // repeated string other = 4;
  inline int other_size() const;
  inline void clear_other();
  static const int kOtherFieldNumber = 4;
  inline const ::std::string& other(int index) const;
  inline ::std::string* mutable_other(int index);
  inline void set_other(int index, const ::std::string& value);
  inline void set_other(int index, const char* value);
  inline void set_other(int index, const char* value, size_t size);
  inline ::std::string* add_other();
  inline void add_other(const ::std::string& value);
  inline void add_other(const char* value);
  inline void add_other(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& other() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_other();

  // repeated string dependenies = 5;
  inline int dependenies_size() const;
  inline void clear_dependenies();
  static const int kDependeniesFieldNumber = 5;
  inline const ::std::string& dependenies(int index) const;
  inline ::std::string* mutable_dependenies(int index);
  inline void set_dependenies(int index, const ::std::string& value);
  inline void set_dependenies(int index, const char* value);
  inline void set_dependenies(int index, const char* value, size_t size);
  inline ::std::string* add_dependenies();
  inline void add_dependenies(const ::std::string& value);
  inline void add_dependenies(const char* value);
  inline void add_dependenies(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& dependenies() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dependenies();

  // optional string language = 6;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // repeated string non_cached = 7;
  inline int non_cached_size() const;
  inline void clear_non_cached();
  static const int kNonCachedFieldNumber = 7;
  inline const ::std::string& non_cached(int index) const;
  inline ::std::string* mutable_non_cached(int index);
  inline void set_non_cached(int index, const ::std::string& value);
  inline void set_non_cached(int index, const char* value);
  inline void set_non_cached(int index, const char* value, size_t size);
  inline ::std::string* add_non_cached();
  inline void add_non_cached(const ::std::string& value);
  inline void add_non_cached(const char* value);
  inline void add_non_cached(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& non_cached() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_non_cached();

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Flags)
 private:
  inline void set_has_compiler();
  inline void clear_has_compiler();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dist_clang::proto::Compiler* compiler_;
  ::std::string* output_;
  ::std::string* input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> other_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dependenies_;
  ::std::string* language_;
  ::google::protobuf::RepeatedPtrField< ::std::string> non_cached_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Flags* default_instance_;
};
// -------------------------------------------------------------------

class Execute : public ::google::protobuf::Message {
 public:
  Execute();
  virtual ~Execute();

  Execute(const Execute& from);

  inline Execute& operator=(const Execute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Execute& default_instance();

  void Swap(Execute* other);

  // implements Message ----------------------------------------------

  Execute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Execute& from);
  void MergeFrom(const Execute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool remote = 1;
  inline bool has_remote() const;
  inline void clear_remote();
  static const int kRemoteFieldNumber = 1;
  inline bool remote() const;
  inline void set_remote(bool value);

  // required .dist_clang.proto.Flags cc_flags = 2;
  inline bool has_cc_flags() const;
  inline void clear_cc_flags();
  static const int kCcFlagsFieldNumber = 2;
  inline const ::dist_clang::proto::Flags& cc_flags() const;
  inline ::dist_clang::proto::Flags* mutable_cc_flags();
  inline ::dist_clang::proto::Flags* release_cc_flags();
  inline void set_allocated_cc_flags(::dist_clang::proto::Flags* cc_flags);

  // optional .dist_clang.proto.Flags pp_flags = 3;
  inline bool has_pp_flags() const;
  inline void clear_pp_flags();
  static const int kPpFlagsFieldNumber = 3;
  inline const ::dist_clang::proto::Flags& pp_flags() const;
  inline ::dist_clang::proto::Flags* mutable_pp_flags();
  inline ::dist_clang::proto::Flags* release_pp_flags();
  inline void set_allocated_pp_flags(::dist_clang::proto::Flags* pp_flags);

  // optional string current_dir = 4;
  inline bool has_current_dir() const;
  inline void clear_current_dir();
  static const int kCurrentDirFieldNumber = 4;
  inline const ::std::string& current_dir() const;
  inline void set_current_dir(const ::std::string& value);
  inline void set_current_dir(const char* value);
  inline void set_current_dir(const char* value, size_t size);
  inline ::std::string* mutable_current_dir();
  inline ::std::string* release_current_dir();
  inline void set_allocated_current_dir(::std::string* current_dir);

  // optional string pp_source = 5;
  inline bool has_pp_source() const;
  inline void clear_pp_source();
  static const int kPpSourceFieldNumber = 5;
  inline const ::std::string& pp_source() const;
  inline void set_pp_source(const ::std::string& value);
  inline void set_pp_source(const char* value);
  inline void set_pp_source(const char* value, size_t size);
  inline ::std::string* mutable_pp_source();
  inline ::std::string* release_pp_source();
  inline void set_allocated_pp_source(::std::string* pp_source);

  static const int kExtensionFieldNumber = 3;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Execute >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Execute)
 private:
  inline void set_has_remote();
  inline void clear_has_remote();
  inline void set_has_cc_flags();
  inline void clear_has_cc_flags();
  inline void set_has_pp_flags();
  inline void clear_has_pp_flags();
  inline void set_has_current_dir();
  inline void clear_has_current_dir();
  inline void set_has_pp_source();
  inline void clear_has_pp_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dist_clang::proto::Flags* cc_flags_;
  ::dist_clang::proto::Flags* pp_flags_;
  ::std::string* current_dir_;
  ::std::string* pp_source_;
  bool remote_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Execute* default_instance_;
};
// -------------------------------------------------------------------

class RemoteResult : public ::google::protobuf::Message {
 public:
  RemoteResult();
  virtual ~RemoteResult();

  RemoteResult(const RemoteResult& from);

  inline RemoteResult& operator=(const RemoteResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteResult& default_instance();

  void Swap(RemoteResult* other);

  // implements Message ----------------------------------------------

  RemoteResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteResult& from);
  void MergeFrom(const RemoteResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes obj = 1;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 1;
  inline const ::std::string& obj() const;
  inline void set_obj(const ::std::string& value);
  inline void set_obj(const char* value);
  inline void set_obj(const void* value, size_t size);
  inline ::std::string* mutable_obj();
  inline ::std::string* release_obj();
  inline void set_allocated_obj(::std::string* obj);

  static const int kExtensionFieldNumber = 4;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::RemoteResult >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.RemoteResult)
 private:
  inline void set_has_obj();
  inline void clear_has_obj();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* obj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static RemoteResult* default_instance_;
};
// ===================================================================


// ===================================================================

// Universal

// -------------------------------------------------------------------

// Test

// required string field1 = 1;
inline bool Test::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_field1() {
  if (field1_ != &::google::protobuf::internal::kEmptyString) {
    field1_->clear();
  }
  clear_has_field1();
}
inline const ::std::string& Test::field1() const {
  return *field1_;
}
inline void Test::set_field1(const ::std::string& value) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void Test::set_field1(const char* value) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void Test::set_field1(const char* value, size_t size) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_field1() {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  return field1_;
}
inline ::std::string* Test::release_field1() {
  clear_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field1_;
    field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test::set_allocated_field1(::std::string* field1) {
  if (field1_ != &::google::protobuf::internal::kEmptyString) {
    delete field1_;
  }
  if (field1) {
    set_has_field1();
    field1_ = field1;
  } else {
    clear_has_field1();
    field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string field2 = 2;
inline bool Test::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_field2() {
  if (field2_ != &::google::protobuf::internal::kEmptyString) {
    field2_->clear();
  }
  clear_has_field2();
}
inline const ::std::string& Test::field2() const {
  return *field2_;
}
inline void Test::set_field2(const ::std::string& value) {
  set_has_field2();
  if (field2_ == &::google::protobuf::internal::kEmptyString) {
    field2_ = new ::std::string;
  }
  field2_->assign(value);
}
inline void Test::set_field2(const char* value) {
  set_has_field2();
  if (field2_ == &::google::protobuf::internal::kEmptyString) {
    field2_ = new ::std::string;
  }
  field2_->assign(value);
}
inline void Test::set_field2(const char* value, size_t size) {
  set_has_field2();
  if (field2_ == &::google::protobuf::internal::kEmptyString) {
    field2_ = new ::std::string;
  }
  field2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_field2() {
  set_has_field2();
  if (field2_ == &::google::protobuf::internal::kEmptyString) {
    field2_ = new ::std::string;
  }
  return field2_;
}
inline ::std::string* Test::release_field2() {
  clear_has_field2();
  if (field2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field2_;
    field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test::set_allocated_field2(::std::string* field2) {
  if (field2_ != &::google::protobuf::internal::kEmptyString) {
    delete field2_;
  }
  if (field2) {
    set_has_field2();
    field2_ = field2;
  } else {
    clear_has_field2();
    field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string field3 = 3;
inline int Test::field3_size() const {
  return field3_.size();
}
inline void Test::clear_field3() {
  field3_.Clear();
}
inline const ::std::string& Test::field3(int index) const {
  return field3_.Get(index);
}
inline ::std::string* Test::mutable_field3(int index) {
  return field3_.Mutable(index);
}
inline void Test::set_field3(int index, const ::std::string& value) {
  field3_.Mutable(index)->assign(value);
}
inline void Test::set_field3(int index, const char* value) {
  field3_.Mutable(index)->assign(value);
}
inline void Test::set_field3(int index, const char* value, size_t size) {
  field3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::add_field3() {
  return field3_.Add();
}
inline void Test::add_field3(const ::std::string& value) {
  field3_.Add()->assign(value);
}
inline void Test::add_field3(const char* value) {
  field3_.Add()->assign(value);
}
inline void Test::add_field3(const char* value, size_t size) {
  field3_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::field3() const {
  return field3_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_field3() {
  return &field3_;
}

// -------------------------------------------------------------------

// Status

// required .dist_clang.proto.Status.Code code = 1 [default = OK];
inline bool Status::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::dist_clang::proto::Status_Code Status::code() const {
  return static_cast< ::dist_clang::proto::Status_Code >(code_);
}
inline void Status::set_code(::dist_clang::proto::Status_Code value) {
  assert(::dist_clang::proto::Status_Code_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string description = 2;
inline bool Status::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Status::description() const {
  return *description_;
}
inline void Status::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Status::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Status::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Status::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Status::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Flags

// required .dist_clang.proto.Compiler compiler = 1;
inline bool Flags::has_compiler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Flags::set_has_compiler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Flags::clear_has_compiler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Flags::clear_compiler() {
  if (compiler_ != NULL) compiler_->::dist_clang::proto::Compiler::Clear();
  clear_has_compiler();
}
inline const ::dist_clang::proto::Compiler& Flags::compiler() const {
  return compiler_ != NULL ? *compiler_ : *default_instance_->compiler_;
}
inline ::dist_clang::proto::Compiler* Flags::mutable_compiler() {
  set_has_compiler();
  if (compiler_ == NULL) compiler_ = new ::dist_clang::proto::Compiler;
  return compiler_;
}
inline ::dist_clang::proto::Compiler* Flags::release_compiler() {
  clear_has_compiler();
  ::dist_clang::proto::Compiler* temp = compiler_;
  compiler_ = NULL;
  return temp;
}
inline void Flags::set_allocated_compiler(::dist_clang::proto::Compiler* compiler) {
  delete compiler_;
  compiler_ = compiler;
  if (compiler) {
    set_has_compiler();
  } else {
    clear_has_compiler();
  }
}

// optional string output = 2;
inline bool Flags::has_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Flags::set_has_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Flags::clear_has_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Flags::clear_output() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    output_->clear();
  }
  clear_has_output();
}
inline const ::std::string& Flags::output() const {
  return *output_;
}
inline void Flags::set_output(const ::std::string& value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void Flags::set_output(const char* value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void Flags::set_output(const char* value, size_t size) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::mutable_output() {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  return output_;
}
inline ::std::string* Flags::release_output() {
  clear_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_;
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Flags::set_allocated_output(::std::string* output) {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (output) {
    set_has_output();
    output_ = output;
  } else {
    clear_has_output();
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string input = 3;
inline bool Flags::has_input() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Flags::set_has_input() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Flags::clear_has_input() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Flags::clear_input() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& Flags::input() const {
  return *input_;
}
inline void Flags::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void Flags::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void Flags::set_input(const char* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  return input_;
}
inline ::std::string* Flags::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Flags::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string other = 4;
inline int Flags::other_size() const {
  return other_.size();
}
inline void Flags::clear_other() {
  other_.Clear();
}
inline const ::std::string& Flags::other(int index) const {
  return other_.Get(index);
}
inline ::std::string* Flags::mutable_other(int index) {
  return other_.Mutable(index);
}
inline void Flags::set_other(int index, const ::std::string& value) {
  other_.Mutable(index)->assign(value);
}
inline void Flags::set_other(int index, const char* value) {
  other_.Mutable(index)->assign(value);
}
inline void Flags::set_other(int index, const char* value, size_t size) {
  other_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::add_other() {
  return other_.Add();
}
inline void Flags::add_other(const ::std::string& value) {
  other_.Add()->assign(value);
}
inline void Flags::add_other(const char* value) {
  other_.Add()->assign(value);
}
inline void Flags::add_other(const char* value, size_t size) {
  other_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Flags::other() const {
  return other_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Flags::mutable_other() {
  return &other_;
}

// repeated string dependenies = 5;
inline int Flags::dependenies_size() const {
  return dependenies_.size();
}
inline void Flags::clear_dependenies() {
  dependenies_.Clear();
}
inline const ::std::string& Flags::dependenies(int index) const {
  return dependenies_.Get(index);
}
inline ::std::string* Flags::mutable_dependenies(int index) {
  return dependenies_.Mutable(index);
}
inline void Flags::set_dependenies(int index, const ::std::string& value) {
  dependenies_.Mutable(index)->assign(value);
}
inline void Flags::set_dependenies(int index, const char* value) {
  dependenies_.Mutable(index)->assign(value);
}
inline void Flags::set_dependenies(int index, const char* value, size_t size) {
  dependenies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::add_dependenies() {
  return dependenies_.Add();
}
inline void Flags::add_dependenies(const ::std::string& value) {
  dependenies_.Add()->assign(value);
}
inline void Flags::add_dependenies(const char* value) {
  dependenies_.Add()->assign(value);
}
inline void Flags::add_dependenies(const char* value, size_t size) {
  dependenies_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Flags::dependenies() const {
  return dependenies_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Flags::mutable_dependenies() {
  return &dependenies_;
}

// optional string language = 6;
inline bool Flags::has_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Flags::set_has_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Flags::clear_has_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Flags::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& Flags::language() const {
  return *language_;
}
inline void Flags::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void Flags::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void Flags::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* Flags::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Flags::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string non_cached = 7;
inline int Flags::non_cached_size() const {
  return non_cached_.size();
}
inline void Flags::clear_non_cached() {
  non_cached_.Clear();
}
inline const ::std::string& Flags::non_cached(int index) const {
  return non_cached_.Get(index);
}
inline ::std::string* Flags::mutable_non_cached(int index) {
  return non_cached_.Mutable(index);
}
inline void Flags::set_non_cached(int index, const ::std::string& value) {
  non_cached_.Mutable(index)->assign(value);
}
inline void Flags::set_non_cached(int index, const char* value) {
  non_cached_.Mutable(index)->assign(value);
}
inline void Flags::set_non_cached(int index, const char* value, size_t size) {
  non_cached_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Flags::add_non_cached() {
  return non_cached_.Add();
}
inline void Flags::add_non_cached(const ::std::string& value) {
  non_cached_.Add()->assign(value);
}
inline void Flags::add_non_cached(const char* value) {
  non_cached_.Add()->assign(value);
}
inline void Flags::add_non_cached(const char* value, size_t size) {
  non_cached_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Flags::non_cached() const {
  return non_cached_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Flags::mutable_non_cached() {
  return &non_cached_;
}

// -------------------------------------------------------------------

// Execute

// required bool remote = 1;
inline bool Execute::has_remote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Execute::set_has_remote() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Execute::clear_has_remote() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Execute::clear_remote() {
  remote_ = false;
  clear_has_remote();
}
inline bool Execute::remote() const {
  return remote_;
}
inline void Execute::set_remote(bool value) {
  set_has_remote();
  remote_ = value;
}

// required .dist_clang.proto.Flags cc_flags = 2;
inline bool Execute::has_cc_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Execute::set_has_cc_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Execute::clear_has_cc_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Execute::clear_cc_flags() {
  if (cc_flags_ != NULL) cc_flags_->::dist_clang::proto::Flags::Clear();
  clear_has_cc_flags();
}
inline const ::dist_clang::proto::Flags& Execute::cc_flags() const {
  return cc_flags_ != NULL ? *cc_flags_ : *default_instance_->cc_flags_;
}
inline ::dist_clang::proto::Flags* Execute::mutable_cc_flags() {
  set_has_cc_flags();
  if (cc_flags_ == NULL) cc_flags_ = new ::dist_clang::proto::Flags;
  return cc_flags_;
}
inline ::dist_clang::proto::Flags* Execute::release_cc_flags() {
  clear_has_cc_flags();
  ::dist_clang::proto::Flags* temp = cc_flags_;
  cc_flags_ = NULL;
  return temp;
}
inline void Execute::set_allocated_cc_flags(::dist_clang::proto::Flags* cc_flags) {
  delete cc_flags_;
  cc_flags_ = cc_flags;
  if (cc_flags) {
    set_has_cc_flags();
  } else {
    clear_has_cc_flags();
  }
}

// optional .dist_clang.proto.Flags pp_flags = 3;
inline bool Execute::has_pp_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Execute::set_has_pp_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Execute::clear_has_pp_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Execute::clear_pp_flags() {
  if (pp_flags_ != NULL) pp_flags_->::dist_clang::proto::Flags::Clear();
  clear_has_pp_flags();
}
inline const ::dist_clang::proto::Flags& Execute::pp_flags() const {
  return pp_flags_ != NULL ? *pp_flags_ : *default_instance_->pp_flags_;
}
inline ::dist_clang::proto::Flags* Execute::mutable_pp_flags() {
  set_has_pp_flags();
  if (pp_flags_ == NULL) pp_flags_ = new ::dist_clang::proto::Flags;
  return pp_flags_;
}
inline ::dist_clang::proto::Flags* Execute::release_pp_flags() {
  clear_has_pp_flags();
  ::dist_clang::proto::Flags* temp = pp_flags_;
  pp_flags_ = NULL;
  return temp;
}
inline void Execute::set_allocated_pp_flags(::dist_clang::proto::Flags* pp_flags) {
  delete pp_flags_;
  pp_flags_ = pp_flags;
  if (pp_flags) {
    set_has_pp_flags();
  } else {
    clear_has_pp_flags();
  }
}

// optional string current_dir = 4;
inline bool Execute::has_current_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Execute::set_has_current_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Execute::clear_has_current_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Execute::clear_current_dir() {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    current_dir_->clear();
  }
  clear_has_current_dir();
}
inline const ::std::string& Execute::current_dir() const {
  return *current_dir_;
}
inline void Execute::set_current_dir(const ::std::string& value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value, size_t size) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::mutable_current_dir() {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  return current_dir_;
}
inline ::std::string* Execute::release_current_dir() {
  clear_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_dir_;
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execute::set_allocated_current_dir(::std::string* current_dir) {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete current_dir_;
  }
  if (current_dir) {
    set_has_current_dir();
    current_dir_ = current_dir;
  } else {
    clear_has_current_dir();
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pp_source = 5;
inline bool Execute::has_pp_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Execute::set_has_pp_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Execute::clear_has_pp_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Execute::clear_pp_source() {
  if (pp_source_ != &::google::protobuf::internal::kEmptyString) {
    pp_source_->clear();
  }
  clear_has_pp_source();
}
inline const ::std::string& Execute::pp_source() const {
  return *pp_source_;
}
inline void Execute::set_pp_source(const ::std::string& value) {
  set_has_pp_source();
  if (pp_source_ == &::google::protobuf::internal::kEmptyString) {
    pp_source_ = new ::std::string;
  }
  pp_source_->assign(value);
}
inline void Execute::set_pp_source(const char* value) {
  set_has_pp_source();
  if (pp_source_ == &::google::protobuf::internal::kEmptyString) {
    pp_source_ = new ::std::string;
  }
  pp_source_->assign(value);
}
inline void Execute::set_pp_source(const char* value, size_t size) {
  set_has_pp_source();
  if (pp_source_ == &::google::protobuf::internal::kEmptyString) {
    pp_source_ = new ::std::string;
  }
  pp_source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::mutable_pp_source() {
  set_has_pp_source();
  if (pp_source_ == &::google::protobuf::internal::kEmptyString) {
    pp_source_ = new ::std::string;
  }
  return pp_source_;
}
inline ::std::string* Execute::release_pp_source() {
  clear_has_pp_source();
  if (pp_source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pp_source_;
    pp_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execute::set_allocated_pp_source(::std::string* pp_source) {
  if (pp_source_ != &::google::protobuf::internal::kEmptyString) {
    delete pp_source_;
  }
  if (pp_source) {
    set_has_pp_source();
    pp_source_ = pp_source;
  } else {
    clear_has_pp_source();
    pp_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoteResult

// required bytes obj = 1;
inline bool RemoteResult::has_obj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteResult::set_has_obj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteResult::clear_has_obj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteResult::clear_obj() {
  if (obj_ != &::google::protobuf::internal::kEmptyString) {
    obj_->clear();
  }
  clear_has_obj();
}
inline const ::std::string& RemoteResult::obj() const {
  return *obj_;
}
inline void RemoteResult::set_obj(const ::std::string& value) {
  set_has_obj();
  if (obj_ == &::google::protobuf::internal::kEmptyString) {
    obj_ = new ::std::string;
  }
  obj_->assign(value);
}
inline void RemoteResult::set_obj(const char* value) {
  set_has_obj();
  if (obj_ == &::google::protobuf::internal::kEmptyString) {
    obj_ = new ::std::string;
  }
  obj_->assign(value);
}
inline void RemoteResult::set_obj(const void* value, size_t size) {
  set_has_obj();
  if (obj_ == &::google::protobuf::internal::kEmptyString) {
    obj_ = new ::std::string;
  }
  obj_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteResult::mutable_obj() {
  set_has_obj();
  if (obj_ == &::google::protobuf::internal::kEmptyString) {
    obj_ = new ::std::string;
  }
  return obj_;
}
inline ::std::string* RemoteResult::release_obj() {
  clear_has_obj();
  if (obj_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = obj_;
    obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoteResult::set_allocated_obj(::std::string* obj) {
  if (obj_ != &::google::protobuf::internal::kEmptyString) {
    delete obj_;
  }
  if (obj) {
    set_has_obj();
    obj_ = obj;
  } else {
    clear_has_obj();
    obj_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dist_clang::proto::Status_Code>() {
  return ::dist_clang::proto::Status_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remote_2eproto__INCLUDED
