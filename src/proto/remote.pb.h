// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_remote_2eproto__INCLUDED
#define PROTOBUF_remote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace clangd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_remote_2eproto();
void protobuf_AssignDesc_remote_2eproto();
void protobuf_ShutdownFile_remote_2eproto();

class LocalExecution;

// ===================================================================

class LocalExecution : public ::google::protobuf::Message {
 public:
  LocalExecution();
  virtual ~LocalExecution();

  LocalExecution(const LocalExecution& from);

  inline LocalExecution& operator=(const LocalExecution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalExecution& default_instance();

  void Swap(LocalExecution* other);

  // implements Message ----------------------------------------------

  LocalExecution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalExecution& from);
  void MergeFrom(const LocalExecution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string current_dir = 1;
  inline bool has_current_dir() const;
  inline void clear_current_dir();
  static const int kCurrentDirFieldNumber = 1;
  inline const ::std::string& current_dir() const;
  inline void set_current_dir(const ::std::string& value);
  inline void set_current_dir(const char* value);
  inline void set_current_dir(const char* value, size_t size);
  inline ::std::string* mutable_current_dir();
  inline ::std::string* release_current_dir();
  inline void set_allocated_current_dir(::std::string* current_dir);

  // repeated string args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:clangd.LocalExecution)
 private:
  inline void set_has_current_dir();
  inline void clear_has_current_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* current_dir_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static LocalExecution* default_instance_;
};
// ===================================================================


// ===================================================================

// LocalExecution

// optional string current_dir = 1;
inline bool LocalExecution::has_current_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalExecution::set_has_current_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalExecution::clear_has_current_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalExecution::clear_current_dir() {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    current_dir_->clear();
  }
  clear_has_current_dir();
}
inline const ::std::string& LocalExecution::current_dir() const {
  return *current_dir_;
}
inline void LocalExecution::set_current_dir(const ::std::string& value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void LocalExecution::set_current_dir(const char* value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void LocalExecution::set_current_dir(const char* value, size_t size) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalExecution::mutable_current_dir() {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  return current_dir_;
}
inline ::std::string* LocalExecution::release_current_dir() {
  clear_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_dir_;
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LocalExecution::set_allocated_current_dir(::std::string* current_dir) {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete current_dir_;
  }
  if (current_dir) {
    set_has_current_dir();
    current_dir_ = current_dir;
  } else {
    clear_has_current_dir();
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string args = 2;
inline int LocalExecution::args_size() const {
  return args_.size();
}
inline void LocalExecution::clear_args() {
  args_.Clear();
}
inline const ::std::string& LocalExecution::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* LocalExecution::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void LocalExecution::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void LocalExecution::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void LocalExecution::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalExecution::add_args() {
  return args_.Add();
}
inline void LocalExecution::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void LocalExecution::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void LocalExecution::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LocalExecution::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LocalExecution::mutable_args() {
  return &args_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace clangd

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remote_2eproto__INCLUDED
