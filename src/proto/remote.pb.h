// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_remote_2eproto__INCLUDED
#define PROTOBUF_remote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_remote_2eproto();
void protobuf_AssignDesc_remote_2eproto();
void protobuf_ShutdownFile_remote_2eproto();

class Execute;

enum Execute_Origin {
  Execute_Origin_LOCAL = 1,
  Execute_Origin_REMOTE = 2
};
bool Execute_Origin_IsValid(int value);
const Execute_Origin Execute_Origin_Origin_MIN = Execute_Origin_LOCAL;
const Execute_Origin Execute_Origin_Origin_MAX = Execute_Origin_REMOTE;
const int Execute_Origin_Origin_ARRAYSIZE = Execute_Origin_Origin_MAX + 1;

const ::google::protobuf::EnumDescriptor* Execute_Origin_descriptor();
inline const ::std::string& Execute_Origin_Name(Execute_Origin value) {
  return ::google::protobuf::internal::NameOfEnum(
    Execute_Origin_descriptor(), value);
}
inline bool Execute_Origin_Parse(
    const ::std::string& name, Execute_Origin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Execute_Origin>(
    Execute_Origin_descriptor(), name, value);
}
// ===================================================================

class Execute : public ::google::protobuf::Message {
 public:
  Execute();
  virtual ~Execute();

  Execute(const Execute& from);

  inline Execute& operator=(const Execute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Execute& default_instance();

  void Swap(Execute* other);

  // implements Message ----------------------------------------------

  Execute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Execute& from);
  void MergeFrom(const Execute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Execute_Origin Origin;
  static const Origin LOCAL = Execute_Origin_LOCAL;
  static const Origin REMOTE = Execute_Origin_REMOTE;
  static inline bool Origin_IsValid(int value) {
    return Execute_Origin_IsValid(value);
  }
  static const Origin Origin_MIN =
    Execute_Origin_Origin_MIN;
  static const Origin Origin_MAX =
    Execute_Origin_Origin_MAX;
  static const int Origin_ARRAYSIZE =
    Execute_Origin_Origin_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Origin_descriptor() {
    return Execute_Origin_descriptor();
  }
  static inline const ::std::string& Origin_Name(Origin value) {
    return Execute_Origin_Name(value);
  }
  static inline bool Origin_Parse(const ::std::string& name,
      Origin* value) {
    return Execute_Origin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .dist_clang.Execute.Origin origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline ::dist_clang::Execute_Origin origin() const;
  inline void set_origin(::dist_clang::Execute_Origin value);

  // optional string current_dir = 2;
  inline bool has_current_dir() const;
  inline void clear_current_dir();
  static const int kCurrentDirFieldNumber = 2;
  inline const ::std::string& current_dir() const;
  inline void set_current_dir(const ::std::string& value);
  inline void set_current_dir(const char* value);
  inline void set_current_dir(const char* value, size_t size);
  inline ::std::string* mutable_current_dir();
  inline ::std::string* release_current_dir();
  inline void set_allocated_current_dir(::std::string* current_dir);

  // repeated string args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:dist_clang.Execute)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_current_dir();
  inline void clear_has_current_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* current_dir_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  int origin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Execute* default_instance_;
};
// ===================================================================


// ===================================================================

// Execute

// required .dist_clang.Execute.Origin origin = 1;
inline bool Execute::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Execute::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Execute::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Execute::clear_origin() {
  origin_ = 1;
  clear_has_origin();
}
inline ::dist_clang::Execute_Origin Execute::origin() const {
  return static_cast< ::dist_clang::Execute_Origin >(origin_);
}
inline void Execute::set_origin(::dist_clang::Execute_Origin value) {
  assert(::dist_clang::Execute_Origin_IsValid(value));
  set_has_origin();
  origin_ = value;
}

// optional string current_dir = 2;
inline bool Execute::has_current_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Execute::set_has_current_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Execute::clear_has_current_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Execute::clear_current_dir() {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    current_dir_->clear();
  }
  clear_has_current_dir();
}
inline const ::std::string& Execute::current_dir() const {
  return *current_dir_;
}
inline void Execute::set_current_dir(const ::std::string& value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value, size_t size) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::mutable_current_dir() {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  return current_dir_;
}
inline ::std::string* Execute::release_current_dir() {
  clear_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_dir_;
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execute::set_allocated_current_dir(::std::string* current_dir) {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete current_dir_;
  }
  if (current_dir) {
    set_has_current_dir();
    current_dir_ = current_dir;
  } else {
    clear_has_current_dir();
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string args = 3;
inline int Execute::args_size() const {
  return args_.size();
}
inline void Execute::clear_args() {
  args_.Clear();
}
inline const ::std::string& Execute::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* Execute::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void Execute::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void Execute::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void Execute::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::add_args() {
  return args_.Add();
}
inline void Execute::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void Execute::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void Execute::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Execute::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Execute::mutable_args() {
  return &args_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dist_clang::Execute_Origin>() {
  return ::dist_clang::Execute_Origin_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remote_2eproto__INCLUDED
