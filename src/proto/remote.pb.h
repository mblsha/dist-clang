// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_remote_2eproto__INCLUDED
#define PROTOBUF_remote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_remote_2eproto();
void protobuf_AssignDesc_remote_2eproto();
void protobuf_ShutdownFile_remote_2eproto();

class Universal;
class Error;
class Execute;
class TestTop;
class Test;

enum Error_Code {
  Error_Code_OK = 0,
  Error_Code_INCONSEQUENT = 1,
  Error_Code_NETWORK = 2,
  Error_Code_BAD_MESSAGE = 3,
  Error_Code_EMPTY_MESSAGE = 4,
  Error_Code_EXECUTION = 5
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_Code_MIN = Error_Code_OK;
const Error_Code Error_Code_Code_MAX = Error_Code_EXECUTION;
const int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
// ===================================================================

class Universal : public ::google::protobuf::Message {
 public:
  Universal();
  virtual ~Universal();

  Universal(const Universal& from);

  inline Universal& operator=(const Universal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Universal& default_instance();

  void Swap(Universal* other);

  // implements Message ----------------------------------------------

  Universal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Universal& from);
  void MergeFrom(const Universal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Universal)
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Universal)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Universal* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static const Code OK = Error_Code_OK;
  static const Code INCONSEQUENT = Error_Code_INCONSEQUENT;
  static const Code NETWORK = Error_Code_NETWORK;
  static const Code BAD_MESSAGE = Error_Code_BAD_MESSAGE;
  static const Code EMPTY_MESSAGE = Error_Code_EMPTY_MESSAGE;
  static const Code EXECUTION = Error_Code_EXECUTION;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Error_Code_Code_MIN;
  static const Code Code_MAX =
    Error_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Error_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Error.Code code = 1 [default = OK];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::dist_clang::proto::Error_Code code() const;
  inline void set_code(::dist_clang::proto::Error_Code value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  static const int kErrorFieldNumber = 1;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Error >, 11, false >
    error;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Error)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  int code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Execute : public ::google::protobuf::Message {
 public:
  Execute();
  virtual ~Execute();

  Execute(const Execute& from);

  inline Execute& operator=(const Execute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Execute& default_instance();

  void Swap(Execute* other);

  // implements Message ----------------------------------------------

  Execute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Execute& from);
  void MergeFrom(const Execute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string current_dir = 1;
  inline bool has_current_dir() const;
  inline void clear_current_dir();
  static const int kCurrentDirFieldNumber = 1;
  inline const ::std::string& current_dir() const;
  inline void set_current_dir(const ::std::string& value);
  inline void set_current_dir(const char* value);
  inline void set_current_dir(const char* value, size_t size);
  inline ::std::string* mutable_current_dir();
  inline ::std::string* release_current_dir();
  inline void set_allocated_current_dir(::std::string* current_dir);

  // optional string executable = 2;
  inline bool has_executable() const;
  inline void clear_executable();
  static const int kExecutableFieldNumber = 2;
  inline const ::std::string& executable() const;
  inline void set_executable(const ::std::string& value);
  inline void set_executable(const char* value);
  inline void set_executable(const char* value, size_t size);
  inline ::std::string* mutable_executable();
  inline ::std::string* release_executable();
  inline void set_allocated_executable(::std::string* executable);

  // repeated string args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  static const int kExecuteFieldNumber = 2;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::Universal,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Execute >, 11, false >
    execute;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Execute)
 private:
  inline void set_has_current_dir();
  inline void clear_has_current_dir();
  inline void set_has_executable();
  inline void clear_has_executable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* current_dir_;
  ::std::string* executable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Execute* default_instance_;
};
// -------------------------------------------------------------------

class TestTop : public ::google::protobuf::Message {
 public:
  TestTop();
  virtual ~TestTop();

  TestTop(const TestTop& from);

  inline TestTop& operator=(const TestTop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestTop& default_instance();

  void Swap(TestTop* other);

  // implements Message ----------------------------------------------

  TestTop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestTop& from);
  void MergeFrom(const TestTop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestTop)
  // @@protoc_insertion_point(class_scope:dist_clang.proto.TestTop)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static TestTop* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  static const int kTestFieldNumber = 3;
  static ::google::protobuf::internal::ExtensionIdentifier< ::dist_clang::proto::TestTop,
      ::google::protobuf::internal::MessageTypeTraits< ::dist_clang::proto::Test >, 11, false >
    test;
  // @@protoc_insertion_point(class_scope:dist_clang.proto.Test)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* field1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_remote_2eproto();
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Universal

// -------------------------------------------------------------------

// Error

// required .dist_clang.proto.Error.Code code = 1 [default = OK];
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::dist_clang::proto::Error_Code Error::code() const {
  return static_cast< ::dist_clang::proto::Error_Code >(code_);
}
inline void Error::set_code(::dist_clang::proto::Error_Code value) {
  assert(::dist_clang::proto::Error_Code_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string description = 2;
inline bool Error::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Error::description() const {
  return *description_;
}
inline void Error::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Error::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Error::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Error::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Error::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Execute

// required string current_dir = 1;
inline bool Execute::has_current_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Execute::set_has_current_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Execute::clear_has_current_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Execute::clear_current_dir() {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    current_dir_->clear();
  }
  clear_has_current_dir();
}
inline const ::std::string& Execute::current_dir() const {
  return *current_dir_;
}
inline void Execute::set_current_dir(const ::std::string& value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(value);
}
inline void Execute::set_current_dir(const char* value, size_t size) {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  current_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::mutable_current_dir() {
  set_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    current_dir_ = new ::std::string;
  }
  return current_dir_;
}
inline ::std::string* Execute::release_current_dir() {
  clear_has_current_dir();
  if (current_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_dir_;
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execute::set_allocated_current_dir(::std::string* current_dir) {
  if (current_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete current_dir_;
  }
  if (current_dir) {
    set_has_current_dir();
    current_dir_ = current_dir;
  } else {
    clear_has_current_dir();
    current_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string executable = 2;
inline bool Execute::has_executable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Execute::set_has_executable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Execute::clear_has_executable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Execute::clear_executable() {
  if (executable_ != &::google::protobuf::internal::kEmptyString) {
    executable_->clear();
  }
  clear_has_executable();
}
inline const ::std::string& Execute::executable() const {
  return *executable_;
}
inline void Execute::set_executable(const ::std::string& value) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::kEmptyString) {
    executable_ = new ::std::string;
  }
  executable_->assign(value);
}
inline void Execute::set_executable(const char* value) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::kEmptyString) {
    executable_ = new ::std::string;
  }
  executable_->assign(value);
}
inline void Execute::set_executable(const char* value, size_t size) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::kEmptyString) {
    executable_ = new ::std::string;
  }
  executable_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::mutable_executable() {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::kEmptyString) {
    executable_ = new ::std::string;
  }
  return executable_;
}
inline ::std::string* Execute::release_executable() {
  clear_has_executable();
  if (executable_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = executable_;
    executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Execute::set_allocated_executable(::std::string* executable) {
  if (executable_ != &::google::protobuf::internal::kEmptyString) {
    delete executable_;
  }
  if (executable) {
    set_has_executable();
    executable_ = executable;
  } else {
    clear_has_executable();
    executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string args = 3;
inline int Execute::args_size() const {
  return args_.size();
}
inline void Execute::clear_args() {
  args_.Clear();
}
inline const ::std::string& Execute::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* Execute::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void Execute::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void Execute::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void Execute::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Execute::add_args() {
  return args_.Add();
}
inline void Execute::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void Execute::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void Execute::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Execute::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Execute::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// TestTop

// -------------------------------------------------------------------

// Test

// optional string field1 = 1;
inline bool Test::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_field1() {
  if (field1_ != &::google::protobuf::internal::kEmptyString) {
    field1_->clear();
  }
  clear_has_field1();
}
inline const ::std::string& Test::field1() const {
  return *field1_;
}
inline void Test::set_field1(const ::std::string& value) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void Test::set_field1(const char* value) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(value);
}
inline void Test::set_field1(const char* value, size_t size) {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_field1() {
  set_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    field1_ = new ::std::string;
  }
  return field1_;
}
inline ::std::string* Test::release_field1() {
  clear_has_field1();
  if (field1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = field1_;
    field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test::set_allocated_field1(::std::string* field1) {
  if (field1_ != &::google::protobuf::internal::kEmptyString) {
    delete field1_;
  }
  if (field1) {
    set_has_field1();
    field1_ = field1;
  } else {
    clear_has_field1();
    field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dist_clang::proto::Error_Code>() {
  return ::dist_clang::proto::Error_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remote_2eproto__INCLUDED
