// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#ifndef PROTOBUF_stats_2eproto__INCLUDED
#define PROTOBUF_stats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stats_2eproto();
void protobuf_AssignDesc_stats_2eproto();
void protobuf_ShutdownFile_stats_2eproto();

class Statistic;
class Statistic_Histogram;

enum Statistic_Metric {
  Statistic_Metric_TASK_COUNT = 1
};
bool Statistic_Metric_IsValid(int value);
const Statistic_Metric Statistic_Metric_Metric_MIN = Statistic_Metric_TASK_COUNT;
const Statistic_Metric Statistic_Metric_Metric_MAX = Statistic_Metric_TASK_COUNT;
const int Statistic_Metric_Metric_ARRAYSIZE = Statistic_Metric_Metric_MAX + 1;

const ::google::protobuf::EnumDescriptor* Statistic_Metric_descriptor();
inline const ::std::string& Statistic_Metric_Name(Statistic_Metric value) {
  return ::google::protobuf::internal::NameOfEnum(
    Statistic_Metric_descriptor(), value);
}
inline bool Statistic_Metric_Parse(
    const ::std::string& name, Statistic_Metric* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Statistic_Metric>(
    Statistic_Metric_descriptor(), name, value);
}
// ===================================================================

class Statistic_Histogram : public ::google::protobuf::Message {
 public:
  Statistic_Histogram();
  virtual ~Statistic_Histogram();

  Statistic_Histogram(const Statistic_Histogram& from);

  inline Statistic_Histogram& operator=(const Statistic_Histogram& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistic_Histogram& default_instance();

  void Swap(Statistic_Histogram* other);

  // implements Message ----------------------------------------------

  Statistic_Histogram* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Statistic_Histogram& from);
  void MergeFrom(const Statistic_Histogram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Statistic.Metric metric = 1;
  inline bool has_metric() const;
  inline void clear_metric();
  static const int kMetricFieldNumber = 1;
  inline ::dist_clang::proto::Statistic_Metric metric() const;
  inline void set_metric(::dist_clang::proto::Statistic_Metric value);

  // repeated uint64 value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint64 value);
  inline void add_value(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_value();

  // repeated uint64 count = 3;
  inline int count_size() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint64 count(int index) const;
  inline void set_count(int index, ::google::protobuf::uint64 value);
  inline void add_count(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_count();

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Statistic.Histogram)
 private:
  inline void set_has_metric();
  inline void clear_has_metric();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > count_;
  int metric_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_stats_2eproto();
  friend void protobuf_AssignDesc_stats_2eproto();
  friend void protobuf_ShutdownFile_stats_2eproto();

  void InitAsDefaultInstance();
  static Statistic_Histogram* default_instance_;
};
// -------------------------------------------------------------------

class Statistic : public ::google::protobuf::Message {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistic& default_instance();

  void Swap(Statistic* other);

  // implements Message ----------------------------------------------

  Statistic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Statistic_Histogram Histogram;

  typedef Statistic_Metric Metric;
  static const Metric TASK_COUNT = Statistic_Metric_TASK_COUNT;
  static inline bool Metric_IsValid(int value) {
    return Statistic_Metric_IsValid(value);
  }
  static const Metric Metric_MIN =
    Statistic_Metric_Metric_MIN;
  static const Metric Metric_MAX =
    Statistic_Metric_Metric_MAX;
  static const int Metric_ARRAYSIZE =
    Statistic_Metric_Metric_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Metric_descriptor() {
    return Statistic_Metric_descriptor();
  }
  static inline const ::std::string& Metric_Name(Metric value) {
    return Statistic_Metric_Name(value);
  }
  static inline bool Metric_Parse(const ::std::string& name,
      Metric* value) {
    return Statistic_Metric_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 interval = 1;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 1;
  inline ::google::protobuf::uint64 interval() const;
  inline void set_interval(::google::protobuf::uint64 value);

  // repeated .dist_clang.proto.Statistic.Histogram values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::dist_clang::proto::Statistic_Histogram& values(int index) const;
  inline ::dist_clang::proto::Statistic_Histogram* mutable_values(int index);
  inline ::dist_clang::proto::Statistic_Histogram* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Statistic_Histogram >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Statistic_Histogram >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Statistic)
 private:
  inline void set_has_interval();
  inline void clear_has_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 interval_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Statistic_Histogram > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_stats_2eproto();
  friend void protobuf_AssignDesc_stats_2eproto();
  friend void protobuf_ShutdownFile_stats_2eproto();

  void InitAsDefaultInstance();
  static Statistic* default_instance_;
};
// ===================================================================


// ===================================================================

// Statistic_Histogram

// required .dist_clang.proto.Statistic.Metric metric = 1;
inline bool Statistic_Histogram::has_metric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Statistic_Histogram::set_has_metric() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Statistic_Histogram::clear_has_metric() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Statistic_Histogram::clear_metric() {
  metric_ = 1;
  clear_has_metric();
}
inline ::dist_clang::proto::Statistic_Metric Statistic_Histogram::metric() const {
  return static_cast< ::dist_clang::proto::Statistic_Metric >(metric_);
}
inline void Statistic_Histogram::set_metric(::dist_clang::proto::Statistic_Metric value) {
  assert(::dist_clang::proto::Statistic_Metric_IsValid(value));
  set_has_metric();
  metric_ = value;
}

// repeated uint64 value = 2;
inline int Statistic_Histogram::value_size() const {
  return value_.size();
}
inline void Statistic_Histogram::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint64 Statistic_Histogram::value(int index) const {
  return value_.Get(index);
}
inline void Statistic_Histogram::set_value(int index, ::google::protobuf::uint64 value) {
  value_.Set(index, value);
}
inline void Statistic_Histogram::add_value(::google::protobuf::uint64 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Statistic_Histogram::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Statistic_Histogram::mutable_value() {
  return &value_;
}

// repeated uint64 count = 3;
inline int Statistic_Histogram::count_size() const {
  return count_.size();
}
inline void Statistic_Histogram::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::uint64 Statistic_Histogram::count(int index) const {
  return count_.Get(index);
}
inline void Statistic_Histogram::set_count(int index, ::google::protobuf::uint64 value) {
  count_.Set(index, value);
}
inline void Statistic_Histogram::add_count(::google::protobuf::uint64 value) {
  count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Statistic_Histogram::count() const {
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Statistic_Histogram::mutable_count() {
  return &count_;
}

// -------------------------------------------------------------------

// Statistic

// required uint64 interval = 1;
inline bool Statistic::has_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Statistic::set_has_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Statistic::clear_has_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Statistic::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
  clear_has_interval();
}
inline ::google::protobuf::uint64 Statistic::interval() const {
  return interval_;
}
inline void Statistic::set_interval(::google::protobuf::uint64 value) {
  set_has_interval();
  interval_ = value;
}

// repeated .dist_clang.proto.Statistic.Histogram values = 2;
inline int Statistic::values_size() const {
  return values_.size();
}
inline void Statistic::clear_values() {
  values_.Clear();
}
inline const ::dist_clang::proto::Statistic_Histogram& Statistic::values(int index) const {
  return values_.Get(index);
}
inline ::dist_clang::proto::Statistic_Histogram* Statistic::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::dist_clang::proto::Statistic_Histogram* Statistic::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Statistic_Histogram >&
Statistic::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Statistic_Histogram >*
Statistic::mutable_values() {
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dist_clang::proto::Statistic_Metric>() {
  return ::dist_clang::proto::Statistic_Metric_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stats_2eproto__INCLUDED
