// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Host_reflection_ = NULL;
const ::google::protobuf::Descriptor* Verbosity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Verbosity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Verbosity_Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Verbosity_Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  Host_descriptor_ = file->message_type(0);
  static const int Host_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, disabled_),
  };
  Host_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Host_descriptor_,
      Host::default_instance_,
      Host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Host));
  Verbosity_descriptor_ = file->message_type(1);
  static const int Verbosity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity, error_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity, levels_),
  };
  Verbosity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Verbosity_descriptor_,
      Verbosity::default_instance_,
      Verbosity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Verbosity));
  Verbosity_Range_descriptor_ = Verbosity_descriptor_->nested_type(0);
  static const int Verbosity_Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity_Range, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity_Range, left_),
  };
  Verbosity_Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Verbosity_Range_descriptor_,
      Verbosity_Range::default_instance_,
      Verbosity_Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity_Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Verbosity_Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Verbosity_Range));
  Configuration_descriptor_ = file->message_type(2);
  static const int Configuration_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, socket_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, pool_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, cache_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, remotes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, local_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, statistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, verbosity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, cache_size_mb_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Host_descriptor_, &Host::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Verbosity_descriptor_, &Verbosity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Verbosity_Range_descriptor_, &Verbosity_Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete Host::default_instance_;
  delete Host_reflection_;
  delete Verbosity::default_instance_;
  delete Verbosity_reflection_;
  delete Verbosity_Range::default_instance_;
  delete Verbosity_Range_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dist_clang::proto::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\020dist_clang.proto\032\nbase.p"
    "roto\"U\n\004Host\022\014\n\004host\030\001 \002(\t\022\022\n\004port\030\002 \001(\r"
    ":\0046000\022\022\n\007threads\030\003 \001(\r:\0012\022\027\n\010disabled\030\004"
    " \001(\010:\005false\"|\n\tVerbosity\022\026\n\nerror_mark\030\001"
    " \001(\r:\00220\0221\n\006levels\030\002 \003(\0132!.dist_clang.pr"
    "oto.Verbosity.Range\032$\n\005Range\022\r\n\005right\030\001 "
    "\002(\r\022\014\n\004left\030\002 \001(\r\"\303\002\n\rConfiguration\022\023\n\013s"
    "ocket_path\030\001 \001(\t\022\031\n\rpool_capacity\030\002 \001(\r:"
    "\00216\022\022\n\ncache_path\030\003 \001(\t\022\'\n\007remotes\030\004 \003(\013"
    "2\026.dist_clang.proto.Host\022%\n\005local\030\005 \001(\0132"
    "\026.dist_clang.proto.Host\022,\n\010versions\030\006 \003("
    "\0132\032.dist_clang.proto.Compiler\022)\n\tstatist"
    "ic\030\007 \001(\0132\026.dist_clang.proto.Host\022.\n\tverb"
    "osity\030\010 \001(\0132\033.dist_clang.proto.Verbosity"
    "\022\025\n\rcache_size_mb\030\t \001(\004", 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  Host::default_instance_ = new Host();
  Verbosity::default_instance_ = new Verbosity();
  Verbosity_Range::default_instance_ = new Verbosity_Range();
  Configuration::default_instance_ = new Configuration();
  Host::default_instance_->InitAsDefaultInstance();
  Verbosity::default_instance_->InitAsDefaultInstance();
  Verbosity_Range::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Host::kHostFieldNumber;
const int Host::kPortFieldNumber;
const int Host::kThreadsFieldNumber;
const int Host::kDisabledFieldNumber;
#endif  // !_MSC_VER

Host::Host()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Host::InitAsDefaultInstance() {
}

Host::Host(const Host& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Host::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 6000u;
  threads_ = 2u;
  disabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Host::~Host() {
  SharedDtor();
}

void Host::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Host_descriptor_;
}

const Host& Host::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Host* Host::default_instance_ = NULL;

Host* Host::New() const {
  return new Host;
}

void Host::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 6000u;
    threads_ = 2u;
    disabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2 [default = 6000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_threads;
        break;
      }

      // optional uint32 threads = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
          set_has_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_disabled;
        break;
      }

      // optional bool disabled = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
          set_has_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // optional uint32 port = 2 [default = 6000];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint32 threads = 3 [default = 2];
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->threads(), output);
  }

  // optional bool disabled = 4 [default = false];
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Host::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional uint32 port = 2 [default = 6000];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint32 threads = 3 [default = 2];
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->threads(), target);
  }

  // optional bool disabled = 4 [default = false];
  if (has_disabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Host::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 port = 2 [default = 6000];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 threads = 3 [default = 2];
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads());
    }

    // optional bool disabled = 4 [default = false];
    if (has_disabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Host* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Host*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_threads()) {
      set_threads(from.threads());
    }
    if (from.has_disabled()) {
      set_disabled(from.disabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Host::Swap(Host* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(threads_, other->threads_);
    std::swap(disabled_, other->disabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Host_descriptor_;
  metadata.reflection = Host_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Verbosity_Range::kRightFieldNumber;
const int Verbosity_Range::kLeftFieldNumber;
#endif  // !_MSC_VER

Verbosity_Range::Verbosity_Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Verbosity_Range::InitAsDefaultInstance() {
}

Verbosity_Range::Verbosity_Range(const Verbosity_Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Verbosity_Range::SharedCtor() {
  _cached_size_ = 0;
  right_ = 0u;
  left_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Verbosity_Range::~Verbosity_Range() {
  SharedDtor();
}

void Verbosity_Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Verbosity_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Verbosity_Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Verbosity_Range_descriptor_;
}

const Verbosity_Range& Verbosity_Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Verbosity_Range* Verbosity_Range::default_instance_ = NULL;

Verbosity_Range* Verbosity_Range::New() const {
  return new Verbosity_Range;
}

void Verbosity_Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    right_ = 0u;
    left_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Verbosity_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 right = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }

      // optional uint32 left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Verbosity_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 right = 1;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->right(), output);
  }

  // optional uint32 left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Verbosity_Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 right = 1;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->right(), target);
  }

  // optional uint32 left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Verbosity_Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 right = 1;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }

    // optional uint32 left = 2;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Verbosity_Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Verbosity_Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Verbosity_Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Verbosity_Range::MergeFrom(const Verbosity_Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Verbosity_Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Verbosity_Range::CopyFrom(const Verbosity_Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Verbosity_Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Verbosity_Range::Swap(Verbosity_Range* other) {
  if (other != this) {
    std::swap(right_, other->right_);
    std::swap(left_, other->left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Verbosity_Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Verbosity_Range_descriptor_;
  metadata.reflection = Verbosity_Range_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Verbosity::kErrorMarkFieldNumber;
const int Verbosity::kLevelsFieldNumber;
#endif  // !_MSC_VER

Verbosity::Verbosity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Verbosity::InitAsDefaultInstance() {
}

Verbosity::Verbosity(const Verbosity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Verbosity::SharedCtor() {
  _cached_size_ = 0;
  error_mark_ = 20u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Verbosity::~Verbosity() {
  SharedDtor();
}

void Verbosity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Verbosity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Verbosity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Verbosity_descriptor_;
}

const Verbosity& Verbosity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Verbosity* Verbosity::default_instance_ = NULL;

Verbosity* Verbosity::New() const {
  return new Verbosity;
}

void Verbosity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_mark_ = 20u;
  }
  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Verbosity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 error_mark = 1 [default = 20];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_mark_)));
          set_has_error_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levels;
        break;
      }

      // repeated .dist_clang.proto.Verbosity.Range levels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Verbosity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 error_mark = 1 [default = 20];
  if (has_error_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_mark(), output);
  }

  // repeated .dist_clang.proto.Verbosity.Range levels = 2;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Verbosity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 error_mark = 1 [default = 20];
  if (has_error_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_mark(), target);
  }

  // repeated .dist_clang.proto.Verbosity.Range levels = 2;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Verbosity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 error_mark = 1 [default = 20];
    if (has_error_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_mark());
    }

  }
  // repeated .dist_clang.proto.Verbosity.Range levels = 2;
  total_size += 1 * this->levels_size();
  for (int i = 0; i < this->levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Verbosity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Verbosity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Verbosity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Verbosity::MergeFrom(const Verbosity& from) {
  GOOGLE_CHECK_NE(&from, this);
  levels_.MergeFrom(from.levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_mark()) {
      set_error_mark(from.error_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Verbosity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Verbosity::CopyFrom(const Verbosity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Verbosity::IsInitialized() const {

  for (int i = 0; i < levels_size(); i++) {
    if (!this->levels(i).IsInitialized()) return false;
  }
  return true;
}

void Verbosity::Swap(Verbosity* other) {
  if (other != this) {
    std::swap(error_mark_, other->error_mark_);
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Verbosity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Verbosity_descriptor_;
  metadata.reflection = Verbosity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kSocketPathFieldNumber;
const int Configuration::kPoolCapacityFieldNumber;
const int Configuration::kCachePathFieldNumber;
const int Configuration::kRemotesFieldNumber;
const int Configuration::kLocalFieldNumber;
const int Configuration::kVersionsFieldNumber;
const int Configuration::kStatisticFieldNumber;
const int Configuration::kVerbosityFieldNumber;
const int Configuration::kCacheSizeMbFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  local_ = const_cast< ::dist_clang::proto::Host*>(&::dist_clang::proto::Host::default_instance());
  statistic_ = const_cast< ::dist_clang::proto::Host*>(&::dist_clang::proto::Host::default_instance());
  verbosity_ = const_cast< ::dist_clang::proto::Verbosity*>(&::dist_clang::proto::Verbosity::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pool_capacity_ = 16u;
  cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_ = NULL;
  statistic_ = NULL;
  verbosity_ = NULL;
  cache_size_mb_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_path_;
  }
  if (cache_path_ != &::google::protobuf::internal::kEmptyString) {
    delete cache_path_;
  }
  if (this != default_instance_) {
    delete local_;
    delete statistic_;
    delete verbosity_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket_path()) {
      if (socket_path_ != &::google::protobuf::internal::kEmptyString) {
        socket_path_->clear();
      }
    }
    pool_capacity_ = 16u;
    if (has_cache_path()) {
      if (cache_path_ != &::google::protobuf::internal::kEmptyString) {
        cache_path_->clear();
      }
    }
    if (has_local()) {
      if (local_ != NULL) local_->::dist_clang::proto::Host::Clear();
    }
    if (has_statistic()) {
      if (statistic_ != NULL) statistic_->::dist_clang::proto::Host::Clear();
    }
    if (has_verbosity()) {
      if (verbosity_ != NULL) verbosity_->::dist_clang::proto::Verbosity::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cache_size_mb_ = GOOGLE_ULONGLONG(0);
  }
  remotes_.Clear();
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string socket_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_path().data(), this->socket_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pool_capacity;
        break;
      }

      // optional uint32 pool_capacity = 2 [default = 16];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pool_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_capacity_)));
          set_has_pool_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cache_path;
        break;
      }

      // optional string cache_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cache_path().data(), this->cache_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remotes;
        break;
      }

      // repeated .dist_clang.proto.Host remotes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remotes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remotes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remotes;
        if (input->ExpectTag(42)) goto parse_local;
        break;
      }

      // optional .dist_clang.proto.Host local = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_versions;
        break;
      }

      // repeated .dist_clang.proto.Compiler versions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_versions;
        if (input->ExpectTag(58)) goto parse_statistic;
        break;
      }

      // optional .dist_clang.proto.Host statistic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_verbosity;
        break;
      }

      // optional .dist_clang.proto.Verbosity verbosity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbosity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verbosity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cache_size_mb;
        break;
      }

      // optional uint64 cache_size_mb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_size_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cache_size_mb_)));
          set_has_cache_size_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string socket_path = 1;
  if (has_socket_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_path().data(), this->socket_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->socket_path(), output);
  }

  // optional uint32 pool_capacity = 2 [default = 16];
  if (has_pool_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pool_capacity(), output);
  }

  // optional string cache_path = 3;
  if (has_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_path().data(), this->cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cache_path(), output);
  }

  // repeated .dist_clang.proto.Host remotes = 4;
  for (int i = 0; i < this->remotes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remotes(i), output);
  }

  // optional .dist_clang.proto.Host local = 5;
  if (has_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->local(), output);
  }

  // repeated .dist_clang.proto.Compiler versions = 6;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->versions(i), output);
  }

  // optional .dist_clang.proto.Host statistic = 7;
  if (has_statistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->statistic(), output);
  }

  // optional .dist_clang.proto.Verbosity verbosity = 8;
  if (has_verbosity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->verbosity(), output);
  }

  // optional uint64 cache_size_mb = 9;
  if (has_cache_size_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cache_size_mb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string socket_path = 1;
  if (has_socket_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_path().data(), this->socket_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socket_path(), target);
  }

  // optional uint32 pool_capacity = 2 [default = 16];
  if (has_pool_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pool_capacity(), target);
  }

  // optional string cache_path = 3;
  if (has_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cache_path().data(), this->cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cache_path(), target);
  }

  // repeated .dist_clang.proto.Host remotes = 4;
  for (int i = 0; i < this->remotes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remotes(i), target);
  }

  // optional .dist_clang.proto.Host local = 5;
  if (has_local()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->local(), target);
  }

  // repeated .dist_clang.proto.Compiler versions = 6;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->versions(i), target);
  }

  // optional .dist_clang.proto.Host statistic = 7;
  if (has_statistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->statistic(), target);
  }

  // optional .dist_clang.proto.Verbosity verbosity = 8;
  if (has_verbosity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->verbosity(), target);
  }

  // optional uint64 cache_size_mb = 9;
  if (has_cache_size_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cache_size_mb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string socket_path = 1;
    if (has_socket_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_path());
    }

    // optional uint32 pool_capacity = 2 [default = 16];
    if (has_pool_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_capacity());
    }

    // optional string cache_path = 3;
    if (has_cache_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_path());
    }

    // optional .dist_clang.proto.Host local = 5;
    if (has_local()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local());
    }

    // optional .dist_clang.proto.Host statistic = 7;
    if (has_statistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistic());
    }

    // optional .dist_clang.proto.Verbosity verbosity = 8;
    if (has_verbosity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->verbosity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cache_size_mb = 9;
    if (has_cache_size_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cache_size_mb());
    }

  }
  // repeated .dist_clang.proto.Host remotes = 4;
  total_size += 1 * this->remotes_size();
  for (int i = 0; i < this->remotes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remotes(i));
  }

  // repeated .dist_clang.proto.Compiler versions = 6;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  remotes_.MergeFrom(from.remotes_);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket_path()) {
      set_socket_path(from.socket_path());
    }
    if (from.has_pool_capacity()) {
      set_pool_capacity(from.pool_capacity());
    }
    if (from.has_cache_path()) {
      set_cache_path(from.cache_path());
    }
    if (from.has_local()) {
      mutable_local()->::dist_clang::proto::Host::MergeFrom(from.local());
    }
    if (from.has_statistic()) {
      mutable_statistic()->::dist_clang::proto::Host::MergeFrom(from.statistic());
    }
    if (from.has_verbosity()) {
      mutable_verbosity()->::dist_clang::proto::Verbosity::MergeFrom(from.verbosity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cache_size_mb()) {
      set_cache_size_mb(from.cache_size_mb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {

  for (int i = 0; i < remotes_size(); i++) {
    if (!this->remotes(i).IsInitialized()) return false;
  }
  if (has_local()) {
    if (!this->local().IsInitialized()) return false;
  }
  for (int i = 0; i < versions_size(); i++) {
    if (!this->versions(i).IsInitialized()) return false;
  }
  if (has_statistic()) {
    if (!this->statistic().IsInitialized()) return false;
  }
  if (has_verbosity()) {
    if (!this->verbosity().IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(socket_path_, other->socket_path_);
    std::swap(pool_capacity_, other->pool_capacity_);
    std::swap(cache_path_, other->cache_path_);
    remotes_.Swap(&other->remotes_);
    std::swap(local_, other->local_);
    versions_.Swap(&other->versions_);
    std::swap(statistic_, other->statistic_);
    std::swap(verbosity_, other->verbosity_);
    std::swap(cache_size_mb_, other->cache_size_mb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

// @@protoc_insertion_point(global_scope)
